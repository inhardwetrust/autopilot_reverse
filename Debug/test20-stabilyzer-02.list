
test20-stabilyzer-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080066b8  080066b8  000166b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080069b0  080069b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069b0  080069b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080069b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08006a28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08006a28  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fd2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185d  00000000  00000000  0002906b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000018d0  00000000  00000000  0002bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b686  00000000  00000000  0002d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d3b  00000000  00000000  00038abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be7f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003048  00000000  00000000  000be84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800669c 	.word	0x0800669c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800669c 	.word	0x0800669c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <FloatoSTR>:
#include <stdlib.h>
#include <_utils.h>



uint8_t FloatoSTR(uint8_t *buff, float Roll, uint8_t shift  ) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	4613      	mov	r3, r2
 8001118:	71fb      	strb	r3, [r7, #7]

	//Roll = -0.2;

	char *ptr_for_buf = (char*)buff;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28

	int16_t arr_index = shift;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t int_part_digits;
	float f_dr_part;
	int16_t int_dr_part;

	/// Minus - not minus
	if (Roll < 0) {
 8001122:	f04f 0100 	mov.w	r1, #0
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f7ff ffa2 	bl	8001070 <__aeabi_fcmplt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <FloatoSTR+0x3e>
		buff[arr_index] = 0x2d;
 8001132:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	222d      	movs	r2, #45	; 0x2d
 800113c:	701a      	strb	r2, [r3, #0]


		arr_index++;
 800113e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001142:	b29b      	uxth	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	/// Int part
	int_part = abs((int) Roll);
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f7ff ffb8 	bl	80010c0 <__aeabi_f2iz>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	bfb8      	it	lt
 8001156:	425b      	neglt	r3, r3
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
	if (int_part >= 1) {
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	2b00      	cmp	r3, #0
 800115e:	dd2c      	ble.n	80011ba <FloatoSTR+0xae>
		itoa(int_part, ptr_for_buf+arr_index, 10);
 8001160:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001166:	4413      	add	r3, r2
 8001168:	220a      	movs	r2, #10
 800116a:	4619      	mov	r1, r3
 800116c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800116e:	f003 fbdf 	bl	8004930 <itoa>
		int_part_digits = (int) ((ceil(log10(abs(int_part)))) * sizeof(char));
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	2b00      	cmp	r3, #0
 8001176:	bfb8      	it	lt
 8001178:	425b      	neglt	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f93a 	bl	80003f4 <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f003 fd2e 	bl	8004be8 <log10>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f003 fc18 	bl	80049c8 <ceil>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc42 	bl	8000a28 <__aeabi_d2iz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	//	ptr_for_buf += int_part_digits;
		arr_index += int_part_digits;
 80011aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011b2:	4413      	add	r3, r2
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80011b8:	e00b      	b.n	80011d2 <FloatoSTR+0xc6>
	} else {
		buff[arr_index] = 0x30;
 80011ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	701a      	strb	r2, [r3, #0]

		arr_index++;
 80011c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	85fb      	strh	r3, [r7, #46]	; 0x2e

	}

	// Dot before fractional
	buff[arr_index] = 0x2e; // decimal is 46 - for dot
 80011d2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	222e      	movs	r2, #46	; 0x2e
 80011dc:	701a      	strb	r2, [r3, #0]

	arr_index++;
 80011de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	85fb      	strh	r3, [r7, #46]	; 0x2e


	// Fractional part -1st digit
	float fintpart = (float) int_part;
 80011ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ec:	f7ff fd4e 	bl	8000c8c <__aeabi_i2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	61fb      	str	r3, [r7, #28]
	float absroll = fabs(Roll);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fa:	61bb      	str	r3, [r7, #24]
	f_dr_part = round((absroll - fintpart) * 10);
 80011fc:	69f9      	ldr	r1, [r7, #28]
 80011fe:	69b8      	ldr	r0, [r7, #24]
 8001200:	f7ff fc8e 	bl	8000b20 <__aeabi_fsub>
 8001204:	4603      	mov	r3, r0
 8001206:	4918      	ldr	r1, [pc, #96]	; (8001268 <FloatoSTR+0x15c>)
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fd93 	bl	8000d34 <__aeabi_fmul>
 800120e:	4603      	mov	r3, r0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f901 	bl	8000418 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f003 fc53 	bl	8004ac8 <round>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fc25 	bl	8000a78 <__aeabi_d2f>
 800122e:	4603      	mov	r3, r0
 8001230:	617b      	str	r3, [r7, #20]

	int_dr_part = (int) f_dr_part;
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff44 	bl	80010c0 <__aeabi_f2iz>
 8001238:	4603      	mov	r3, r0
 800123a:	827b      	strh	r3, [r7, #18]

	itoa(int_dr_part, ptr_for_buf+arr_index, 10);
 800123c:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8001240:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001246:	4413      	add	r3, r2
 8001248:	220a      	movs	r2, #10
 800124a:	4619      	mov	r1, r3
 800124c:	f003 fb70 	bl	8004930 <itoa>
	arr_index++;
 8001250:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001254:	b29b      	uxth	r3, r3
 8001256:	3301      	adds	r3, #1
 8001258:	b29b      	uxth	r3, r3
 800125a:	85fb      	strh	r3, [r7, #46]	; 0x2e


	return arr_index;
 800125c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800125e:	b2db      	uxtb	r3, r3

}
 8001260:	4618      	mov	r0, r3
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	41200000 	.word	0x41200000

0800126c <I2C_WriteBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void I2C_WriteBuffer(uint8_t I2C_ADDRESS, uint8_t *aTxBuffer, uint8_t TXBUFFERSIZE) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af02      	add	r7, sp, #8
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
     while(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 800127c:	e002      	b.n	8001284 <I2C_WriteBuffer+0x18>
         if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF){
 800127e:	480f      	ldr	r0, [pc, #60]	; (80012bc <I2C_WriteBuffer+0x50>)
 8001280:	f001 feeb 	bl	800305a <HAL_I2C_GetError>
     while(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29b      	uxth	r3, r3
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	b299      	uxth	r1, r3
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	b29b      	uxth	r3, r3
 8001290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <I2C_WriteBuffer+0x50>)
 800129a:	f001 fb73 	bl	8002984 <HAL_I2C_Master_Transmit>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ec      	bne.n	800127e <I2C_WriteBuffer+0x12>
            // _Error_Handler(__FILE__, aTxBuffer[0]);
         }

     }

       while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
 80012a4:	bf00      	nop
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <I2C_WriteBuffer+0x50>)
 80012a8:	f001 feca 	bl	8003040 <HAL_I2C_GetState>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	d1f9      	bne.n	80012a6 <I2C_WriteBuffer+0x3a>
 }
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000008c 	.word	0x2000008c

080012c0 <I2C_ReadBuffer>:

static void I2C_ReadBuffer(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t *aRxBuffer, uint8_t RXBUFFERSIZE){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	603a      	str	r2, [r7, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	460b      	mov	r3, r1
 80012d0:	71bb      	strb	r3, [r7, #6]
 80012d2:	4613      	mov	r3, r2
 80012d4:	717b      	strb	r3, [r7, #5]

     I2C_WriteBuffer(I2C_ADDRESS, &RegAddr, 1);
 80012d6:	1db9      	adds	r1, r7, #6
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2201      	movs	r2, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ffc5 	bl	800126c <I2C_WriteBuffer>

     while(HAL_I2C_Master_Receive(&hi2c2, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 80012e2:	e002      	b.n	80012ea <I2C_ReadBuffer+0x2a>
         if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF){
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <I2C_ReadBuffer+0x64>)
 80012e6:	f001 feb8 	bl	800305a <HAL_I2C_GetError>
     while(HAL_I2C_Master_Receive(&hi2c2, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b299      	uxth	r1, r3
 80012f2:	797b      	ldrb	r3, [r7, #5]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <I2C_ReadBuffer+0x64>)
 8001300:	f001 fc3e 	bl	8002b80 <HAL_I2C_Master_Receive>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ec      	bne.n	80012e4 <I2C_ReadBuffer+0x24>
            // _Error_Handler(__FILE__, __LINE__);
         }
     }

     while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
 800130a:	bf00      	nop
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <I2C_ReadBuffer+0x64>)
 800130e:	f001 fe97 	bl	8003040 <HAL_I2C_GetState>
 8001312:	4603      	mov	r3, r0
 8001314:	2b20      	cmp	r3, #32
 8001316:	d1f9      	bne.n	800130c <I2C_ReadBuffer+0x4c>
 }
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000008c 	.word	0x2000008c

08001328 <MPU6050_Init>:


 static void MPU6050_Init(void){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

     uint8_t buffer[7];

     // включение/побудка модул�?
     buffer[0] = MPU6050_RA_PWR_MGMT_1;
 800132e:	236b      	movs	r3, #107	; 0x6b
 8001330:	703b      	strb	r3, [r7, #0]
     buffer[1] = 0x00;
 8001332:	2300      	movs	r3, #0
 8001334:	707b      	strb	r3, [r7, #1]
     I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8001336:	463b      	mov	r3, r7
 8001338:	2202      	movs	r2, #2
 800133a:	4619      	mov	r1, r3
 800133c:	2068      	movs	r0, #104	; 0x68
 800133e:	f7ff ff95 	bl	800126c <I2C_WriteBuffer>

     // конфиг гиро�?копа на ±500°/�?
     buffer[0] = MPU6050_RA_GYRO_CONFIG;
 8001342:	231b      	movs	r3, #27
 8001344:	703b      	strb	r3, [r7, #0]
     buffer[1] = 0x8; /* нормальное значение дл�? 500 */
 8001346:	2308      	movs	r3, #8
 8001348:	707b      	strb	r3, [r7, #1]
    // buffer[1] = 0x0; /// пробное значение дл 250° �?ек
     I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 800134a:	463b      	mov	r3, r7
 800134c:	2202      	movs	r2, #2
 800134e:	4619      	mov	r1, r3
 8001350:	2068      	movs	r0, #104	; 0x68
 8001352:	f7ff ff8b 	bl	800126c <I2C_WriteBuffer>

     // конфиг ак�?елерометра на ±8g
     buffer[0] = MPU6050_RA_ACCEL_CONFIG;
 8001356:	231c      	movs	r3, #28
 8001358:	703b      	strb	r3, [r7, #0]
     buffer[1] = 0x10;
 800135a:	2310      	movs	r3, #16
 800135c:	707b      	strb	r3, [r7, #1]
     I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 800135e:	463b      	mov	r3, r7
 8001360:	2202      	movs	r2, #2
 8001362:	4619      	mov	r1, r3
 8001364:	2068      	movs	r0, #104	; 0x68
 8001366:	f7ff ff81 	bl	800126c <I2C_WriteBuffer>
//
//     buffer[0] = MPU6050_RA_INT_ENABLE; //x38
//     buffer[1] = 0x01;
//     I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);

     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <MPU6050_Init+0x64>)
 8001370:	f001 f970 	bl	8002654 <HAL_GPIO_WritePin>
     MPU6050_Data.isinterrupt=1;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MPU6050_Init+0x68>)
 8001376:	2201      	movs	r2, #1
 8001378:	735a      	strb	r2, [r3, #13]
     MPU6050_Data.fGX_Cal=0;
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <MPU6050_Init+0x68>)
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	601a      	str	r2, [r3, #0]


 }
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40010c00 	.word	0x40010c00
 8001390:	20000124 	.word	0x20000124

08001394 <MPU6050_GetAllData>:

 static void MPU6050_GetAllData(int16_t *Data){
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

   uint8_t accelbuffer[14];

   // �? 0x3B 14 �?ледующих реги�?тров �?одержат данные измерени�? модул�?
   I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW,MPU6050_RA_ACCEL_XOUT_H,accelbuffer,14);
 800139c:	f107 0208 	add.w	r2, r7, #8
 80013a0:	230e      	movs	r3, #14
 80013a2:	213b      	movs	r1, #59	; 0x3b
 80013a4:	2068      	movs	r0, #104	; 0x68
 80013a6:	f7ff ff8b 	bl	80012c0 <I2C_ReadBuffer>

   /* Registers 59 to 64 – Accelerometer Measurements */
   for (int i = 0; i< 3; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e01a      	b.n	80013e6 <MPU6050_GetAllData+0x52>
       Data[i] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	3320      	adds	r3, #32
 80013b6:	443b      	add	r3, r7
 80013b8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b29a      	uxth	r2, r3
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	3301      	adds	r3, #1
 80013c6:	3320      	adds	r3, #32
 80013c8:	443b      	add	r3, r7
 80013ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	b299      	uxth	r1, r3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	b20a      	sxth	r2, r1
 80013de:	801a      	strh	r2, [r3, #0]
   for (int i = 0; i< 3; i++)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	3301      	adds	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	dde1      	ble.n	80013b0 <MPU6050_GetAllData+0x1c>

   /* Registers 65 and 66 – Temperature Measurement */
   //пока пропу�?каем Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53

   /* Registers 67 to 72 – Gyroscope Measurements */
   for (int i = 4; i < 7; i++)
 80013ec:	2304      	movs	r3, #4
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	e01d      	b.n	800142e <MPU6050_GetAllData+0x9a>
       Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	3320      	adds	r3, #32
 80013f8:	443b      	add	r3, r7
 80013fa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b29a      	uxth	r2, r3
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	3301      	adds	r3, #1
 8001408:	3320      	adds	r3, #32
 800140a:	443b      	add	r3, r7
 800140c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b299      	uxth	r1, r3
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800141c:	3b01      	subs	r3, #1
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	b20a      	sxth	r2, r1
 8001426:	801a      	strh	r2, [r3, #0]
   for (int i = 4; i < 7; i++)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3301      	adds	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b06      	cmp	r3, #6
 8001432:	ddde      	ble.n	80013f2 <MPU6050_GetAllData+0x5e>

 }
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <MPU6050_Calibrate>:

 static void MPU6050_Calibrate(void){
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
	 HAL_Delay(400);
 8001446:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800144a:	f000 fd97 	bl	8001f7c <HAL_Delay>
   int16_t mpu6050data[6];
   uint16_t iNumCM = 1000;
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	827b      	strh	r3, [r7, #18]

   for (int i = 0; i < iNumCM ; i ++){
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e039      	b.n	80014ce <MPU6050_Calibrate+0x8e>
     MPU6050_GetAllData(mpu6050data);
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff99 	bl	8001394 <MPU6050_GetAllData>
     MPU6050_Data.fGX_Cal += mpu6050data[3];
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <MPU6050_Calibrate+0x134>)
 8001464:	681c      	ldr	r4, [r3, #0]
 8001466:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fc0e 	bl	8000c8c <__aeabi_i2f>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	4620      	mov	r0, r4
 8001476:	f7ff fb55 	bl	8000b24 <__addsf3>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <MPU6050_Calibrate+0x134>)
 8001480:	601a      	str	r2, [r3, #0]
     MPU6050_Data.fGY_Cal += mpu6050data[4];
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <MPU6050_Calibrate+0x134>)
 8001484:	685c      	ldr	r4, [r3, #4]
 8001486:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fbfe 	bl	8000c8c <__aeabi_i2f>
 8001490:	4603      	mov	r3, r0
 8001492:	4619      	mov	r1, r3
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff fb45 	bl	8000b24 <__addsf3>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <MPU6050_Calibrate+0x134>)
 80014a0:	605a      	str	r2, [r3, #4]
     MPU6050_Data.fGZ_Cal += mpu6050data[5];
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <MPU6050_Calibrate+0x134>)
 80014a4:	689c      	ldr	r4, [r3, #8]
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fbee 	bl	8000c8c <__aeabi_i2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff fb35 	bl	8000b24 <__addsf3>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MPU6050_Calibrate+0x134>)
 80014c0:	609a      	str	r2, [r3, #8]

//     IntToSerialPortLN("rwc=", mpu6050data[3]);
//     IntToSerialPortLN("rpc=", MPU6050_Data.fGX_Cal);
     HAL_Delay(3); // 3 �?ек на калибровку
 80014c2:	2003      	movs	r0, #3
 80014c4:	f000 fd5a 	bl	8001f7c <HAL_Delay>
   for (int i = 0; i < iNumCM ; i ++){
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	8a7b      	ldrh	r3, [r7, #18]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbc1      	blt.n	800145a <MPU6050_Calibrate+0x1a>
   }
   MPU6050_Data.fGX_Cal /= iNumCM;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MPU6050_Calibrate+0x134>)
 80014d8:	681c      	ldr	r4, [r3, #0]
 80014da:	8a7b      	ldrh	r3, [r7, #18]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fbd5 	bl	8000c8c <__aeabi_i2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4619      	mov	r1, r3
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fcd8 	bl	8000e9c <__aeabi_fdiv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MPU6050_Calibrate+0x134>)
 80014f2:	601a      	str	r2, [r3, #0]
   MPU6050_Data.fGY_Cal /= iNumCM;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MPU6050_Calibrate+0x134>)
 80014f6:	685c      	ldr	r4, [r3, #4]
 80014f8:	8a7b      	ldrh	r3, [r7, #18]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fbc6 	bl	8000c8c <__aeabi_i2f>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fcc9 	bl	8000e9c <__aeabi_fdiv>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MPU6050_Calibrate+0x134>)
 8001510:	605a      	str	r2, [r3, #4]
   MPU6050_Data.fGZ_Cal /= iNumCM;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MPU6050_Calibrate+0x134>)
 8001514:	689c      	ldr	r4, [r3, #8]
 8001516:	8a7b      	ldrh	r3, [r7, #18]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fbb7 	bl	8000c8c <__aeabi_i2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4619      	mov	r1, r3
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fcba 	bl	8000e9c <__aeabi_fdiv>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MPU6050_Calibrate+0x134>)
 800152e:	609a      	str	r2, [r3, #8]

 //  IntToSerialPortLN("СAL=", MPU6050_Data.fGX_Cal);

   MPU6050_Data.isinitialized = 1;
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MPU6050_Calibrate+0x134>)
 8001532:	2201      	movs	r2, #1
 8001534:	731a      	strb	r2, [r3, #12]

   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2110      	movs	r1, #16
 800153a:	480f      	ldr	r0, [pc, #60]	; (8001578 <MPU6050_Calibrate+0x138>)
 800153c:	f001 f88a 	bl	8002654 <HAL_GPIO_WritePin>
   HAL_Delay(600);
 8001540:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001544:	f000 fd1a 	bl	8001f7c <HAL_Delay>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2110      	movs	r1, #16
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <MPU6050_Calibrate+0x138>)
 800154e:	f001 f881 	bl	8002654 <HAL_GPIO_WritePin>
   HAL_Delay(600);
 8001552:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001556:	f000 fd11 	bl	8001f7c <HAL_Delay>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2110      	movs	r1, #16
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MPU6050_Calibrate+0x138>)
 8001560:	f001 f878 	bl	8002654 <HAL_GPIO_WritePin>
   MPU6050_Data.isinterrupt=1;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <MPU6050_Calibrate+0x134>)
 8001566:	2201      	movs	r2, #1
 8001568:	735a      	strb	r2, [r3, #13]
 }
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	20000124 	.word	0x20000124
 8001578:	40010800 	.word	0x40010800
 800157c:	00000000 	.word	0x00000000

08001580 <HAL_SYSTICK_Callback>:

 void HAL_SYSTICK_Callback(void){
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
	 static int uiTicksCNT = 0;

	if(MPU6050_Data.isinitialized && ++uiTicksCNT >= 20) { // 50 раз в cекунду
 8001586:	4bc0      	ldr	r3, [pc, #768]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001588:	7b1b      	ldrb	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 81e2 	beq.w	8001954 <HAL_SYSTICK_Callback+0x3d4>
 8001590:	4bbe      	ldr	r3, [pc, #760]	; (800188c <HAL_SYSTICK_Callback+0x30c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4abd      	ldr	r2, [pc, #756]	; (800188c <HAL_SYSTICK_Callback+0x30c>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4bbc      	ldr	r3, [pc, #752]	; (800188c <HAL_SYSTICK_Callback+0x30c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b13      	cmp	r3, #19
 80015a0:	f340 81d8 	ble.w	8001954 <HAL_SYSTICK_Callback+0x3d4>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	48b9      	ldr	r0, [pc, #740]	; (8001890 <HAL_SYSTICK_Callback+0x310>)
 80015aa:	f001 f853 	bl	8002654 <HAL_GPIO_WritePin>

		MPU6050_GetAllData(mpu6050_readydata);
 80015ae:	48b9      	ldr	r0, [pc, #740]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 80015b0:	f7ff fef0 	bl	8001394 <MPU6050_GetAllData>

		float Roll = mpu6050_readydata[4] - MPU6050_Data.fGY_Cal; // отно�?ительно "нул�?"
 80015b4:	4bb7      	ldr	r3, [pc, #732]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 80015b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fb66 	bl	8000c8c <__aeabi_i2f>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4bb1      	ldr	r3, [pc, #708]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f7ff faa9 	bl	8000b20 <__aeabi_fsub>
 80015ce:	4603      	mov	r3, r0
 80015d0:	617b      	str	r3, [r7, #20]
		Roll = Roll/65.5/50;
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7fe ff20 	bl	8000418 <__aeabi_f2d>
 80015d8:	a3a3      	add	r3, pc, #652	; (adr r3, 8001868 <HAL_SYSTICK_Callback+0x2e8>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f89d 	bl	800071c <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4baa      	ldr	r3, [pc, #680]	; (8001898 <HAL_SYSTICK_Callback+0x318>)
 80015f0:	f7ff f894 	bl	800071c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fa3c 	bl	8000a78 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	617b      	str	r3, [r7, #20]
		MPU6050_Data.aRoll += Roll;
 8001604:	4ba0      	ldr	r3, [pc, #640]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	6979      	ldr	r1, [r7, #20]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa8a 	bl	8000b24 <__addsf3>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b9c      	ldr	r3, [pc, #624]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001616:	611a      	str	r2, [r3, #16]

		//if(fabsf(Roll) > 0.01)


		MPU6050_Data.aPitch += (mpu6050_readydata[3] - MPU6050_Data.fGX_Cal)/65.5/50;
 8001618:	4b9b      	ldr	r3, [pc, #620]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fefb 	bl	8000418 <__aeabi_f2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	4b9b      	ldr	r3, [pc, #620]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 8001628:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb2d 	bl	8000c8c <__aeabi_i2f>
 8001632:	4602      	mov	r2, r0
 8001634:	4b94      	ldr	r3, [pc, #592]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f7ff fa70 	bl	8000b20 <__aeabi_fsub>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fee8 	bl	8000418 <__aeabi_f2d>
 8001648:	a387      	add	r3, pc, #540	; (adr r3, 8001868 <HAL_SYSTICK_Callback+0x2e8>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7ff f865 	bl	800071c <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b8e      	ldr	r3, [pc, #568]	; (8001898 <HAL_SYSTICK_Callback+0x318>)
 8001660:	f7ff f85c 	bl	800071c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fd76 	bl	800015c <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff f9fe 	bl	8000a78 <__aeabi_d2f>
 800167c:	4603      	mov	r3, r0
 800167e:	4a82      	ldr	r2, [pc, #520]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001680:	6153      	str	r3, [r2, #20]

		float Yaw = (mpu6050_readydata[5] - MPU6050_Data.fGZ_Cal)/65.5/50;
 8001682:	4b84      	ldr	r3, [pc, #528]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 8001684:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff faff 	bl	8000c8c <__aeabi_i2f>
 800168e:	4602      	mov	r2, r0
 8001690:	4b7d      	ldr	r3, [pc, #500]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4619      	mov	r1, r3
 8001696:	4610      	mov	r0, r2
 8001698:	f7ff fa42 	bl	8000b20 <__aeabi_fsub>
 800169c:	4603      	mov	r3, r0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe feba 	bl	8000418 <__aeabi_f2d>
 80016a4:	a370      	add	r3, pc, #448	; (adr r3, 8001868 <HAL_SYSTICK_Callback+0x2e8>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7ff f837 	bl	800071c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b77      	ldr	r3, [pc, #476]	; (8001898 <HAL_SYSTICK_Callback+0x318>)
 80016bc:	f7ff f82e 	bl	800071c <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff f9d6 	bl	8000a78 <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]
		MPU6050_Data.aYaw += Yaw;
 80016d0:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa24 	bl	8000b24 <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b69      	ldr	r3, [pc, #420]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 80016e2:	619a      	str	r2, [r3, #24]

		//учитываем параметр по Z е�?ли по нему е�?ть движение
		if(Yaw > 0.01){//TODO: �?равнение �? дельтой
 80016e4:	6938      	ldr	r0, [r7, #16]
 80016e6:	f7fe fe97 	bl	8000418 <__aeabi_f2d>
 80016ea:	a361      	add	r3, pc, #388	; (adr r3, 8001870 <HAL_SYSTICK_Callback+0x2f0>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7ff f97a 	bl	80009e8 <__aeabi_dcmpgt>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d040      	beq.n	800177c <HAL_SYSTICK_Callback+0x1fc>
		        float _Y = sin(Yaw * 3.1415/180);
 80016fa:	6938      	ldr	r0, [r7, #16]
 80016fc:	f7fe fe8c 	bl	8000418 <__aeabi_f2d>
 8001700:	a35d      	add	r3, pc, #372	; (adr r3, 8001878 <HAL_SYSTICK_Callback+0x2f8>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe fedf 	bl	80004c8 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_SYSTICK_Callback+0x31c>)
 8001718:	f7ff f800 	bl	800071c <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f003 fa18 	bl	8004b58 <sin>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff f9a2 	bl	8000a78 <__aeabi_d2f>
 8001734:	4603      	mov	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
		        MPU6050_Data.aPitch += MPU6050_Data.aRoll  * _Y;
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 800173a:	695c      	ldr	r4, [r3, #20]
 800173c:	4b52      	ldr	r3, [pc, #328]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff faf6 	bl	8000d34 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff f9e9 	bl	8000b24 <__addsf3>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001758:	615a      	str	r2, [r3, #20]
		        MPU6050_Data.aRoll -= MPU6050_Data.aPitch * _Y;
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 800175c:	691c      	ldr	r4, [r3, #16]
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fae5 	bl	8000d34 <__aeabi_fmul>
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff f9d6 	bl	8000b20 <__aeabi_fsub>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_SYSTICK_Callback+0x308>)
 800177a:	611a      	str	r2, [r3, #16]
		}

		// тангаж...
		float pitch4macc = atan2(mpu6050_readydata[1] ,( sqrt(sqr(mpu6050_readydata[0]) + sqr(mpu6050_readydata[2]) ) ) )* R2DEG;
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 800177e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe36 	bl	80003f4 <__aeabi_i2d>
 8001788:	4604      	mov	r4, r0
 800178a:	460d      	mov	r5, r1
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	461a      	mov	r2, r3
 8001794:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	fb03 f202 	mul.w	r2, r3, r2
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 80017a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 80017a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe1e 	bl	80003f4 <__aeabi_i2d>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f003 fa44 	bl	8004c4c <sqrt>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f003 fa0a 	bl	8004be4 <atan2>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_SYSTICK_Callback+0x31c>)
 80017d6:	f7fe fe77 	bl	80004c8 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	a327      	add	r3, pc, #156	; (adr r3, 8001880 <HAL_SYSTICK_Callback+0x300>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ff98 	bl	800071c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f940 	bl	8000a78 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60bb      	str	r3, [r7, #8]
//		// ...и крен
		float roll4macc = atan2 (mpu6050_readydata[0] ,( sqrt ( sqr(mpu6050_readydata[1]) + sqr(mpu6050_readydata[2]) ) ) )* R2DEG;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fdf6 	bl	80003f4 <__aeabi_i2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 800180e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001812:	461a      	mov	r2, r3
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 8001816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800181a:	fb03 f202 	mul.w	r2, r3, r2
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 8001820:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001824:	4619      	mov	r1, r3
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_SYSTICK_Callback+0x314>)
 8001828:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fdde 	bl	80003f4 <__aeabi_i2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f003 fa04 	bl	8004c4c <sqrt>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f003 f9ca 	bl	8004be4 <atan2>
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_SYSTICK_Callback+0x31c>)
 8001856:	f7fe fe37 	bl	80004c8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	e01d      	b.n	80018a0 <HAL_SYSTICK_Callback+0x320>
 8001864:	f3af 8000 	nop.w
 8001868:	00000000 	.word	0x00000000
 800186c:	40506000 	.word	0x40506000
 8001870:	47ae147b 	.word	0x47ae147b
 8001874:	3f847ae1 	.word	0x3f847ae1
 8001878:	c083126f 	.word	0xc083126f
 800187c:	400921ca 	.word	0x400921ca
 8001880:	f01b866e 	.word	0xf01b866e
 8001884:	400921f9 	.word	0x400921f9
 8001888:	20000124 	.word	0x20000124
 800188c:	20000180 	.word	0x20000180
 8001890:	40010c00 	.word	0x40010c00
 8001894:	20000150 	.word	0x20000150
 8001898:	40490000 	.word	0x40490000
 800189c:	40668000 	.word	0x40668000
 80018a0:	a331      	add	r3, pc, #196	; (adr r3, 8001968 <HAL_SYSTICK_Callback+0x3e8>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe ff39 	bl	800071c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f8e1 	bl	8000a78 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	607b      	str	r3, [r7, #4]

		MPU6050_Data.aPitch = MPU6050_Data.aPitch * (1-MPU6050_KOEF_COMPL) + pitch4macc * MPU6050_KOEF_COMPL;
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_SYSTICK_Callback+0x400>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fdaa 	bl	8000418 <__aeabi_f2d>
 80018c4:	a32a      	add	r3, pc, #168	; (adr r3, 8001970 <HAL_SYSTICK_Callback+0x3f0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fdfd 	bl	80004c8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	f7fe fd9e 	bl	8000418 <__aeabi_f2d>
 80018dc:	a326      	add	r3, pc, #152	; (adr r3, 8001978 <HAL_SYSTICK_Callback+0x3f8>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fdf1 	bl	80004c8 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fc35 	bl	800015c <__adddf3>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f8bd 	bl	8000a78 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_SYSTICK_Callback+0x400>)
 8001902:	6153      	str	r3, [r2, #20]
		MPU6050_Data.aRoll = MPU6050_Data.aRoll * (1-MPU6050_KOEF_COMPL) + roll4macc * MPU6050_KOEF_COMPL;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_SYSTICK_Callback+0x400>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd85 	bl	8000418 <__aeabi_f2d>
 800190e:	a318      	add	r3, pc, #96	; (adr r3, 8001970 <HAL_SYSTICK_Callback+0x3f0>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fdd8 	bl	80004c8 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7fe fd79 	bl	8000418 <__aeabi_f2d>
 8001926:	a314      	add	r3, pc, #80	; (adr r3, 8001978 <HAL_SYSTICK_Callback+0x3f8>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fdcc 	bl	80004c8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fc10 	bl	800015c <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f898 	bl	8000a78 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_SYSTICK_Callback+0x400>)
 800194c:	6113      	str	r3, [r2, #16]


	    uiTicksCNT = 0;
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_SYSTICK_Callback+0x404>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <HAL_SYSTICK_Callback+0x408>)
 800195a:	f000 fe7b 	bl	8002654 <HAL_GPIO_WritePin>

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);

 }
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bdb0      	pop	{r4, r5, r7, pc}
 8001966:	bf00      	nop
 8001968:	f01b866e 	.word	0xf01b866e
 800196c:	400921f9 	.word	0x400921f9
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fe99999 	.word	0x3fe99999
 8001978:	9999999a 	.word	0x9999999a
 800197c:	3fc99999 	.word	0x3fc99999
 8001980:	20000124 	.word	0x20000124
 8001984:	20000180 	.word	0x20000180
 8001988:	40010c00 	.word	0x40010c00

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f000 fa92 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f85a 	bl	8001a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f000 f8f2 	bl	8001b80 <MX_GPIO_Init>
  MX_I2C2_Init();
 800199c:	f000 f898 	bl	8001ad0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80019a0:	f000 f8c4 	bl	8001b2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  ///// Start

  HAL_Delay(200);
 80019a4:	20c8      	movs	r0, #200	; 0xc8
 80019a6:	f000 fae9 	bl	8001f7c <HAL_Delay>
  MPU6050_Init();
 80019aa:	f7ff fcbd 	bl	8001328 <MPU6050_Init>
  HAL_Delay(500);
 80019ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b2:	f000 fae3 	bl	8001f7c <HAL_Delay>
  MPU6050_Calibrate();
 80019b6:	f7ff fd43 	bl	8001440 <MPU6050_Calibrate>

  endstring[0] = 0x0d;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <main+0xa8>)
 80019bc:	220d      	movs	r2, #13
 80019be:	701a      	strb	r2, [r3, #0]
  endstring[1] = 0x0a;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <main+0xa8>)
 80019c2:	220a      	movs	r2, #10
 80019c4:	705a      	strb	r2, [r3, #1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80019c6:	2110      	movs	r1, #16
 80019c8:	481b      	ldr	r0, [pc, #108]	; (8001a38 <main+0xac>)
 80019ca:	f000 fe5b 	bl	8002684 <HAL_GPIO_TogglePin>


	  shift=FloatoSTR(serial_buffer, MPU6050_Data.aRoll, 0 );
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <main+0xb0>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	481a      	ldr	r0, [pc, #104]	; (8001a40 <main+0xb4>)
 80019d8:	f7ff fb98 	bl	800110c <FloatoSTR>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <main+0xb8>)
 80019e2:	701a      	strb	r2, [r3, #0]
	  serial_buffer[shift]=0x2c; /// 44 in dec
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <main+0xb8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <main+0xb4>)
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	5499      	strb	r1, [r3, r2]
	  serial_buffer[shift+1]=0x20; /// space
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <main+0xb8>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <main+0xb4>)
 80019f8:	2120      	movs	r1, #32
 80019fa:	54d1      	strb	r1, [r2, r3]
	  shift=FloatoSTR(serial_buffer, MPU6050_Data.aRoll, shift+2 );
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <main+0xb0>)
 80019fe:	6919      	ldr	r1, [r3, #16]
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <main+0xb8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3302      	adds	r3, #2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <main+0xb4>)
 8001a0c:	f7ff fb7e 	bl	800110c <FloatoSTR>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <main+0xb8>)
 8001a16:	701a      	strb	r2, [r3, #0]
//	  serial_buffer[shift+1]=0x0a;




	  HAL_UART_Transmit(&huart2, serial_buffer, shift+2, 20);
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <main+0xb8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	2314      	movs	r3, #20
 8001a24:	4906      	ldr	r1, [pc, #24]	; (8001a40 <main+0xb4>)
 8001a26:	4808      	ldr	r0, [pc, #32]	; (8001a48 <main+0xbc>)
 8001a28:	f002 fab5 	bl	8003f96 <HAL_UART_Transmit>


///	  FloatToSerialPortLN( MPU6050_Data.aRoll,5);


	  HAL_Delay(20);
 8001a2c:	2014      	movs	r0, #20
 8001a2e:	f000 faa5 	bl	8001f7c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001a32:	e7c8      	b.n	80019c6 <main+0x3a>
 8001a34:	2000017c 	.word	0x2000017c
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	20000124 	.word	0x20000124
 8001a40:	2000015c 	.word	0x2000015c
 8001a44:	2000017e 	.word	0x2000017e
 8001a48:	200000e0 	.word	0x200000e0

08001a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b090      	sub	sp, #64	; 0x40
 8001a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a52:	f107 0318 	add.w	r3, r7, #24
 8001a56:	2228      	movs	r2, #40	; 0x28
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 ff6a 	bl	8004934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a76:	2310      	movs	r3, #16
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001a82:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fe1b 	bl	80036c8 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a98:	f000 f8dc 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f888 	bl	8003bcc <HAL_RCC_ClockConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001ac2:	f000 f8c7 	bl	8001c54 <Error_Handler>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3740      	adds	r7, #64	; 0x40
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <MX_I2C2_Init+0x54>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_I2C2_Init+0x58>)
 8001ade:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_I2C2_Init+0x50>)
 8001b0e:	f000 fdf5 	bl	80026fc <HAL_I2C_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b18:	f000 f89c 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000008c 	.word	0x2000008c
 8001b24:	40005800 	.word	0x40005800
 8001b28:	000186a0 	.word	0x000186a0

08001b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_USART2_UART_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b64:	f002 f9ca 	bl	8003efc <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b6e:	f000 f871 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200000e0 	.word	0x200000e0
 8001b7c:	40004400 	.word	0x40004400

08001b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <MX_GPIO_Init+0xc4>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a2a      	ldr	r2, [pc, #168]	; (8001c44 <MX_GPIO_Init+0xc4>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <MX_GPIO_Init+0xc4>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <MX_GPIO_Init+0xc4>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <MX_GPIO_Init+0xc4>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_GPIO_Init+0xc4>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	481f      	ldr	r0, [pc, #124]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001bca:	f000 fd43 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <MX_GPIO_Init+0xcc>)
 8001bd4:	f000 fd3e 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bd8:	2310      	movs	r3, #16
 8001bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_GPIO_Init+0xc8>)
 8001bf0:	f000 fbac 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_GPIO_Init+0xd0>)
 8001bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	4810      	ldr	r0, [pc, #64]	; (8001c4c <MX_GPIO_Init+0xcc>)
 8001c0a:	f000 fb9f 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0e:	2340      	movs	r3, #64	; 0x40
 8001c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <MX_GPIO_Init+0xcc>)
 8001c26:	f000 fb91 	bl	800234c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f000 fa9f 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c34:	2028      	movs	r0, #40	; 0x28
 8001c36:	f000 fab8 	bl	80021aa <HAL_NVIC_EnableIRQ>

}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	10110000 	.word	0x10110000

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x8>
	...

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6193      	str	r3, [r2, #24]
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x5c>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_MspInit+0x60>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_MspInit+0x60>)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000

08001cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <HAL_I2C_MspInit+0x74>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d124      	bne.n	8001d2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_I2C_MspInit+0x78>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_I2C_MspInit+0x78>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_I2C_MspInit+0x78>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d02:	2312      	movs	r3, #18
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <HAL_I2C_MspInit+0x7c>)
 8001d12:	f000 fb1b 	bl	800234c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_I2C_MspInit+0x78>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_I2C_MspInit+0x78>)
 8001d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_I2C_MspInit+0x78>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40005800 	.word	0x40005800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_UART_MspInit+0x98>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d137      	bne.n	8001dd4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_UART_MspInit+0x9c>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_UART_MspInit+0x9c>)
 8001d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6e:	61d3      	str	r3, [r2, #28]
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_UART_MspInit+0x9c>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_UART_MspInit+0x9c>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <HAL_UART_MspInit+0x9c>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_UART_MspInit+0x9c>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d94:	2304      	movs	r3, #4
 8001d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4619      	mov	r1, r3
 8001da6:	480f      	ldr	r0, [pc, #60]	; (8001de4 <HAL_UART_MspInit+0xa0>)
 8001da8:	f000 fad0 	bl	800234c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dac:	2308      	movs	r3, #8
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_UART_MspInit+0xa0>)
 8001dc0:	f000 fac4 	bl	800234c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2026      	movs	r0, #38	; 0x26
 8001dca:	f000 f9d2 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dce:	2026      	movs	r0, #38	; 0x26
 8001dd0:	f000 f9eb 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40004400 	.word	0x40004400
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010800 	.word	0x40010800

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2e:	f000 f889 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001e32:	f000 f9d4 	bl	80021de <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <USART2_IRQHandler+0x10>)
 8001e42:	f002 f93b 	bl	80040bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200000e0 	.word	0x200000e0

08001e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e58:	f000 fc2e 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

 // MPU_ReadyData();

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <Reset_Handler>:
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <LoopFillZerobss+0x12>)
 8001e6e:	490d      	ldr	r1, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x16>)
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x1a>)
 8001e72:	2300      	movs	r3, #0
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:
 8001e76:	58d4      	ldr	r4, [r2, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:
 8001e7c:	18c4      	adds	r4, r0, r3
 8001e7e:	428c      	cmp	r4, r1
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <LoopFillZerobss+0x1e>)
 8001e84:	4c0a      	ldr	r4, [pc, #40]	; (8001eb0 <LoopFillZerobss+0x22>)
 8001e86:	2300      	movs	r3, #0
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:
 8001e8e:	42a2      	cmp	r2, r4
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>
 8001e92:	f7ff ffe5 	bl	8001e60 <SystemInit>
 8001e96:	f002 fd0f 	bl	80048b8 <__libc_init_array>
 8001e9a:	f7ff fd77 	bl	800198c <main>
 8001e9e:	4770      	bx	lr
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000070 	.word	0x20000070
 8001ea8:	080069b8 	.word	0x080069b8
 8001eac:	20000070 	.word	0x20000070
 8001eb0:	20000188 	.word	0x20000188

08001eb4 <ADC1_2_IRQHandler>:
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_2_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_Init+0x28>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_Init+0x28>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f947 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fec4 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f95f 	bl	80021c6 <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 f927 	bl	8002172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x1c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x20>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_IncTick+0x20>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000184 	.word	0x20000184

08001f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_GetTick+0x10>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000184 	.word	0x20000184

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff fff0 	bl	8001f68 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffe0 	bl	8001f68 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <__NVIC_EnableIRQ+0x34>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f7ff ff90 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff2d 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff42 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff90 	bl	80020b4 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5f 	bl	8002060 <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff35 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffa2 	bl	8002118 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80021e2:	f7ff f9cd 	bl	8001580 <HAL_SYSTICK_Callback>
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d008      	beq.n	8002212 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e020      	b.n	8002254 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 020e 	bic.w	r2, r2, #14
 8002220:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
	...

08002260 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002272:	2b02      	cmp	r3, #2
 8002274:	d005      	beq.n	8002282 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e051      	b.n	8002326 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 020e 	bic.w	r2, r2, #14
 8002290:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_DMA_Abort_IT+0xd0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d029      	beq.n	8002300 <HAL_DMA_Abort_IT+0xa0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_DMA_Abort_IT+0xd4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d022      	beq.n	80022fc <HAL_DMA_Abort_IT+0x9c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_DMA_Abort_IT+0xd8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d01a      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x96>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_DMA_Abort_IT+0xdc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d012      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x90>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_DMA_Abort_IT+0xe0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00a      	beq.n	80022ea <HAL_DMA_Abort_IT+0x8a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_DMA_Abort_IT+0xe4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d102      	bne.n	80022e4 <HAL_DMA_Abort_IT+0x84>
 80022de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022e2:	e00e      	b.n	8002302 <HAL_DMA_Abort_IT+0xa2>
 80022e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e8:	e00b      	b.n	8002302 <HAL_DMA_Abort_IT+0xa2>
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	e008      	b.n	8002302 <HAL_DMA_Abort_IT+0xa2>
 80022f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f4:	e005      	b.n	8002302 <HAL_DMA_Abort_IT+0xa2>
 80022f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fa:	e002      	b.n	8002302 <HAL_DMA_Abort_IT+0xa2>
 80022fc:	2310      	movs	r3, #16
 80022fe:	e000      	b.n	8002302 <HAL_DMA_Abort_IT+0xa2>
 8002300:	2301      	movs	r3, #1
 8002302:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_DMA_Abort_IT+0xe8>)
 8002304:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
    } 
  }
  return status;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40020008 	.word	0x40020008
 8002334:	4002001c 	.word	0x4002001c
 8002338:	40020030 	.word	0x40020030
 800233c:	40020044 	.word	0x40020044
 8002340:	40020058 	.word	0x40020058
 8002344:	4002006c 	.word	0x4002006c
 8002348:	40020000 	.word	0x40020000

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b08b      	sub	sp, #44	; 0x2c
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	e169      	b.n	8002634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002360:	2201      	movs	r2, #1
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 8158 	bne.w	800262e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4a9a      	ldr	r2, [pc, #616]	; (80025ec <HAL_GPIO_Init+0x2a0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d05e      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 8002388:	4a98      	ldr	r2, [pc, #608]	; (80025ec <HAL_GPIO_Init+0x2a0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d875      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 800238e:	4a98      	ldr	r2, [pc, #608]	; (80025f0 <HAL_GPIO_Init+0x2a4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d058      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 8002394:	4a96      	ldr	r2, [pc, #600]	; (80025f0 <HAL_GPIO_Init+0x2a4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d86f      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 800239a:	4a96      	ldr	r2, [pc, #600]	; (80025f4 <HAL_GPIO_Init+0x2a8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d052      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 80023a0:	4a94      	ldr	r2, [pc, #592]	; (80025f4 <HAL_GPIO_Init+0x2a8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d869      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023a6:	4a94      	ldr	r2, [pc, #592]	; (80025f8 <HAL_GPIO_Init+0x2ac>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d04c      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 80023ac:	4a92      	ldr	r2, [pc, #584]	; (80025f8 <HAL_GPIO_Init+0x2ac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d863      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023b2:	4a92      	ldr	r2, [pc, #584]	; (80025fc <HAL_GPIO_Init+0x2b0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d046      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 80023b8:	4a90      	ldr	r2, [pc, #576]	; (80025fc <HAL_GPIO_Init+0x2b0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d85d      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d82a      	bhi.n	8002418 <HAL_GPIO_Init+0xcc>
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d859      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <HAL_GPIO_Init+0x80>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	08002447 	.word	0x08002447
 80023d0:	08002421 	.word	0x08002421
 80023d4:	08002433 	.word	0x08002433
 80023d8:	08002475 	.word	0x08002475
 80023dc:	0800247b 	.word	0x0800247b
 80023e0:	0800247b 	.word	0x0800247b
 80023e4:	0800247b 	.word	0x0800247b
 80023e8:	0800247b 	.word	0x0800247b
 80023ec:	0800247b 	.word	0x0800247b
 80023f0:	0800247b 	.word	0x0800247b
 80023f4:	0800247b 	.word	0x0800247b
 80023f8:	0800247b 	.word	0x0800247b
 80023fc:	0800247b 	.word	0x0800247b
 8002400:	0800247b 	.word	0x0800247b
 8002404:	0800247b 	.word	0x0800247b
 8002408:	0800247b 	.word	0x0800247b
 800240c:	0800247b 	.word	0x0800247b
 8002410:	08002429 	.word	0x08002429
 8002414:	0800243d 	.word	0x0800243d
 8002418:	4a79      	ldr	r2, [pc, #484]	; (8002600 <HAL_GPIO_Init+0x2b4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800241e:	e02c      	b.n	800247a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	623b      	str	r3, [r7, #32]
          break;
 8002426:	e029      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	3304      	adds	r3, #4
 800242e:	623b      	str	r3, [r7, #32]
          break;
 8002430:	e024      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	3308      	adds	r3, #8
 8002438:	623b      	str	r3, [r7, #32]
          break;
 800243a:	e01f      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	330c      	adds	r3, #12
 8002442:	623b      	str	r3, [r7, #32]
          break;
 8002444:	e01a      	b.n	800247c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800244e:	2304      	movs	r3, #4
 8002450:	623b      	str	r3, [r7, #32]
          break;
 8002452:	e013      	b.n	800247c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800245c:	2308      	movs	r3, #8
 800245e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	611a      	str	r2, [r3, #16]
          break;
 8002466:	e009      	b.n	800247c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002468:	2308      	movs	r3, #8
 800246a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	615a      	str	r2, [r3, #20]
          break;
 8002472:	e003      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
          break;
 8002478:	e000      	b.n	800247c <HAL_GPIO_Init+0x130>
          break;
 800247a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2bff      	cmp	r3, #255	; 0xff
 8002480:	d801      	bhi.n	8002486 <HAL_GPIO_Init+0x13a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	e001      	b.n	800248a <HAL_GPIO_Init+0x13e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2bff      	cmp	r3, #255	; 0xff
 8002490:	d802      	bhi.n	8002498 <HAL_GPIO_Init+0x14c>
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_Init+0x152>
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	3b08      	subs	r3, #8
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	210f      	movs	r1, #15
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	6a39      	ldr	r1, [r7, #32]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	431a      	orrs	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80b1 	beq.w	800262e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024cc:	4b4d      	ldr	r3, [pc, #308]	; (8002604 <HAL_GPIO_Init+0x2b8>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a4c      	ldr	r2, [pc, #304]	; (8002604 <HAL_GPIO_Init+0x2b8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_GPIO_Init+0x2b8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024e4:	4a48      	ldr	r2, [pc, #288]	; (8002608 <HAL_GPIO_Init+0x2bc>)
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a40      	ldr	r2, [pc, #256]	; (800260c <HAL_GPIO_Init+0x2c0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <HAL_GPIO_Init+0x1ec>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3f      	ldr	r2, [pc, #252]	; (8002610 <HAL_GPIO_Init+0x2c4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00d      	beq.n	8002534 <HAL_GPIO_Init+0x1e8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3e      	ldr	r2, [pc, #248]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <HAL_GPIO_Init+0x1e4>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <HAL_GPIO_Init+0x2cc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_GPIO_Init+0x1e0>
 8002528:	2303      	movs	r3, #3
 800252a:	e006      	b.n	800253a <HAL_GPIO_Init+0x1ee>
 800252c:	2304      	movs	r3, #4
 800252e:	e004      	b.n	800253a <HAL_GPIO_Init+0x1ee>
 8002530:	2302      	movs	r3, #2
 8002532:	e002      	b.n	800253a <HAL_GPIO_Init+0x1ee>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_GPIO_Init+0x1ee>
 8002538:	2300      	movs	r3, #0
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	f002 0203 	and.w	r2, r2, #3
 8002540:	0092      	lsls	r2, r2, #2
 8002542:	4093      	lsls	r3, r2
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800254a:	492f      	ldr	r1, [pc, #188]	; (8002608 <HAL_GPIO_Init+0x2bc>)
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_GPIO_Init+0x2d0>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	492c      	ldr	r1, [pc, #176]	; (800261c <HAL_GPIO_Init+0x2d0>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_GPIO_Init+0x2d0>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	43db      	mvns	r3, r3
 800257a:	4928      	ldr	r1, [pc, #160]	; (800261c <HAL_GPIO_Init+0x2d0>)
 800257c:	4013      	ands	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_GPIO_Init+0x2d0>)
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4922      	ldr	r1, [pc, #136]	; (800261c <HAL_GPIO_Init+0x2d0>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_GPIO_Init+0x2d0>)
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	491e      	ldr	r1, [pc, #120]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	4918      	ldr	r1, [pc, #96]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	4914      	ldr	r1, [pc, #80]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d021      	beq.n	8002620 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60cb      	str	r3, [r1, #12]
 80025e8:	e021      	b.n	800262e <HAL_GPIO_Init+0x2e2>
 80025ea:	bf00      	nop
 80025ec:	10320000 	.word	0x10320000
 80025f0:	10310000 	.word	0x10310000
 80025f4:	10220000 	.word	0x10220000
 80025f8:	10210000 	.word	0x10210000
 80025fc:	10120000 	.word	0x10120000
 8002600:	10110000 	.word	0x10110000
 8002604:	40021000 	.word	0x40021000
 8002608:	40010000 	.word	0x40010000
 800260c:	40010800 	.word	0x40010800
 8002610:	40010c00 	.word	0x40010c00
 8002614:	40011000 	.word	0x40011000
 8002618:	40011400 	.word	0x40011400
 800261c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_GPIO_Init+0x304>)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	43db      	mvns	r3, r3
 8002628:	4909      	ldr	r1, [pc, #36]	; (8002650 <HAL_GPIO_Init+0x304>)
 800262a:	4013      	ands	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	3301      	adds	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	f47f ae8e 	bne.w	8002360 <HAL_GPIO_Init+0x14>
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	372c      	adds	r7, #44	; 0x2c
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002670:	e003      	b.n	800267a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43d9      	mvns	r1, r3
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	400b      	ands	r3, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	611a      	str	r2, [r3, #16]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f806 	bl	80026e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40010400 	.word	0x40010400

080026e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e12b      	b.n	8002966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff face 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800275e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002760:	f001 fb86 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a81      	ldr	r2, [pc, #516]	; (8002970 <HAL_I2C_Init+0x274>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d807      	bhi.n	8002780 <HAL_I2C_Init+0x84>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a80      	ldr	r2, [pc, #512]	; (8002974 <HAL_I2C_Init+0x278>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e006      	b.n	800278e <HAL_I2C_Init+0x92>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a7d      	ldr	r2, [pc, #500]	; (8002978 <HAL_I2C_Init+0x27c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0e7      	b.n	8002966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a78      	ldr	r2, [pc, #480]	; (800297c <HAL_I2C_Init+0x280>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
 80027a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_I2C_Init+0x274>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d802      	bhi.n	80027d0 <HAL_I2C_Init+0xd4>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	e009      	b.n	80027e4 <HAL_I2C_Init+0xe8>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_I2C_Init+0x284>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	3301      	adds	r3, #1
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	495c      	ldr	r1, [pc, #368]	; (8002970 <HAL_I2C_Init+0x274>)
 8002800:	428b      	cmp	r3, r1
 8002802:	d819      	bhi.n	8002838 <HAL_I2C_Init+0x13c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e59      	subs	r1, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002818:	400b      	ands	r3, r1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_I2C_Init+0x138>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e59      	subs	r1, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fbb1 f3f3 	udiv	r3, r1, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002832:	e051      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002834:	2304      	movs	r3, #4
 8002836:	e04f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_I2C_Init+0x168>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e012      	b.n	800288a <HAL_I2C_Init+0x18e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x196>
 800288e:	2301      	movs	r3, #1
 8002890:	e022      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10e      	bne.n	80028b8 <HAL_I2C_Init+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e58      	subs	r0, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	e00f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6809      	ldr	r1, [r1, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6911      	ldr	r1, [r2, #16]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68d2      	ldr	r2, [r2, #12]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	000186a0 	.word	0x000186a0
 8002974:	001e847f 	.word	0x001e847f
 8002978:	003d08ff 	.word	0x003d08ff
 800297c:	431bde83 	.word	0x431bde83
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	461a      	mov	r2, r3
 8002990:	460b      	mov	r3, r1
 8002992:	817b      	strh	r3, [r7, #10]
 8002994:	4613      	mov	r3, r2
 8002996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002998:	f7ff fae6 	bl	8001f68 <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	f040 80e0 	bne.w	8002b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2319      	movs	r3, #25
 80029b2:	2201      	movs	r2, #1
 80029b4:	4970      	ldr	r1, [pc, #448]	; (8002b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fcaa 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0d3      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_I2C_Master_Transmit+0x50>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0cc      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d007      	beq.n	80029fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2221      	movs	r2, #33	; 0x21
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2210      	movs	r2, #16
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	893a      	ldrh	r2, [r7, #8]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a50      	ldr	r2, [pc, #320]	; (8002b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a3c:	8979      	ldrh	r1, [r7, #10]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fb14 	bl	8003070 <I2C_MasterRequestWrite>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e08d      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a68:	e066      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	6a39      	ldr	r1, [r7, #32]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fd24 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06b      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	781a      	ldrb	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d11b      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x188>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	6a39      	ldr	r1, [r7, #32]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fd14 	bl	800353e <I2C_WaitOnBTFFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e01a      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d194      	bne.n	8002a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	00100002 	.word	0x00100002
 8002b7c:	ffff0000 	.word	0xffff0000

08002b80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08c      	sub	sp, #48	; 0x30
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	817b      	strh	r3, [r7, #10]
 8002b90:	4613      	mov	r3, r2
 8002b92:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff f9e6 	bl	8001f68 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	f040 823f 	bne.w	800302a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	497f      	ldr	r1, [pc, #508]	; (8002db4 <HAL_I2C_Master_Receive+0x234>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fbaa 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e232      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_Master_Receive+0x54>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e22b      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d007      	beq.n	8002bfa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2222      	movs	r2, #34	; 0x22
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2210      	movs	r2, #16
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	893a      	ldrh	r2, [r7, #8]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a5f      	ldr	r2, [pc, #380]	; (8002db8 <HAL_I2C_Master_Receive+0x238>)
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fa96 	bl	8003174 <I2C_MasterRequestRead>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1ec      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d113      	bne.n	8002c82 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e1c0      	b.n	8003004 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d11e      	bne.n	8002cc8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9a:	b672      	cpsid	i
}
 8002c9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc4:	b662      	cpsie	i
}
 8002cc6:	e035      	b.n	8002d34 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d11e      	bne.n	8002d0e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce0:	b672      	cpsid	i
}
 8002ce2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0a:	b662      	cpsie	i
}
 8002d0c:	e012      	b.n	8002d34 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d34:	e166      	b.n	8003004 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	f200 811f 	bhi.w	8002f7e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d123      	bne.n	8002d90 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fc37 	bl	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e167      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d8e:	e139      	b.n	8003004 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d152      	bne.n	8002e3e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <HAL_I2C_Master_Receive+0x23c>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fab4 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e13c      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
 8002db2:	bf00      	nop
 8002db4:	00100002 	.word	0x00100002
 8002db8:	ffff0000 	.word	0xffff0000
 8002dbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc0:	b672      	cpsid	i
}
 8002dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e06:	b662      	cpsie	i
}
 8002e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e3c:	e0e2      	b.n	8003004 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	2200      	movs	r2, #0
 8002e46:	497b      	ldr	r1, [pc, #492]	; (8003034 <HAL_I2C_Master_Receive+0x4b4>)
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fa61 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0e9      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e68:	b672      	cpsid	i
}
 8002e6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e9e:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_I2C_Master_Receive+0x4b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_I2C_Master_Receive+0x4bc>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a1a      	lsrs	r2, r3, #8
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00da      	lsls	r2, r3, #3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d118      	bne.n	8002ef6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ee6:	b662      	cpsie	i
}
 8002ee8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e09a      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d1d9      	bne.n	8002eb8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f46:	b662      	cpsie	i
}
 8002f48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f7c:	e042      	b.n	8003004 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb1c 	bl	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e04c      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d118      	bne.n	8003004 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f ae94 	bne.w	8002d36 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010004 	.word	0x00010004
 8003038:	20000000 	.word	0x20000000
 800303c:	14f8b589 	.word	0x14f8b589

08003040 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	b2db      	uxtb	r3, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	460b      	mov	r3, r1
 800307e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d006      	beq.n	800309a <I2C_MasterRequestWrite+0x2a>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d003      	beq.n	800309a <I2C_MasterRequestWrite+0x2a>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003098:	d108      	bne.n	80030ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e00b      	b.n	80030c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	2b12      	cmp	r3, #18
 80030b2:	d107      	bne.n	80030c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f91d 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ea:	d103      	bne.n	80030f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e035      	b.n	8003164 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003100:	d108      	bne.n	8003114 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003102:	897b      	ldrh	r3, [r7, #10]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003110:	611a      	str	r2, [r3, #16]
 8003112:	e01b      	b.n	800314c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003114:	897b      	ldrh	r3, [r7, #10]
 8003116:	11db      	asrs	r3, r3, #7
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f003 0306 	and.w	r3, r3, #6
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f063 030f 	orn	r3, r3, #15
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <I2C_MasterRequestWrite+0xfc>)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f943 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e010      	b.n	8003164 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003142:	897b      	ldrh	r3, [r7, #10]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4907      	ldr	r1, [pc, #28]	; (8003170 <I2C_MasterRequestWrite+0x100>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f933 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	00010008 	.word	0x00010008
 8003170:	00010002 	.word	0x00010002

08003174 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	460b      	mov	r3, r1
 8003182:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003198:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d006      	beq.n	80031ae <I2C_MasterRequestRead+0x3a>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d003      	beq.n	80031ae <I2C_MasterRequestRead+0x3a>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031ac:	d108      	bne.n	80031c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e00b      	b.n	80031d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	2b11      	cmp	r3, #17
 80031c6:	d107      	bne.n	80031d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f893 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d103      	bne.n	8003208 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e079      	b.n	8003300 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003214:	d108      	bne.n	8003228 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	e05f      	b.n	80032e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	11db      	asrs	r3, r3, #7
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f063 030f 	orn	r3, r3, #15
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4930      	ldr	r1, [pc, #192]	; (8003308 <I2C_MasterRequestRead+0x194>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f8b9 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e054      	b.n	8003300 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4929      	ldr	r1, [pc, #164]	; (800330c <I2C_MasterRequestRead+0x198>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f8a9 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e044      	b.n	8003300 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f831 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	d103      	bne.n	80032cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e017      	b.n	8003300 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032d0:	897b      	ldrh	r3, [r7, #10]
 80032d2:	11db      	asrs	r3, r3, #7
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 0306 	and.w	r3, r3, #6
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f063 030e 	orn	r3, r3, #14
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4907      	ldr	r1, [pc, #28]	; (800330c <I2C_MasterRequestRead+0x198>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f865 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00010008 	.word	0x00010008
 800330c:	00010002 	.word	0x00010002

08003310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003320:	e025      	b.n	800336e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d021      	beq.n	800336e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fe1d 	bl	8001f68 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e023      	b.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10d      	bne.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	e00c      	b.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d0b6      	beq.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033cc:	e051      	b.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d123      	bne.n	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0204 	orr.w	r2, r3, #4
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e046      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d021      	beq.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342e:	f7fe fd9b 	bl	8001f68 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d116      	bne.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f043 0220 	orr.w	r2, r3, #32
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e020      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10c      	bne.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	43da      	mvns	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e00b      	b.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d18d      	bne.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c8:	e02d      	b.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8ce 	bl	800366c <I2C_IsAcknowledgeFailed>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e02d      	b.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d021      	beq.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fe fd41 	bl	8001f68 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d116      	bne.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e007      	b.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d1ca      	bne.n	80034ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800354a:	e02d      	b.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f88d 	bl	800366c <I2C_IsAcknowledgeFailed>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e02d      	b.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d021      	beq.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003564:	f7fe fd00 	bl	8001f68 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	d302      	bcc.n	800357a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d1ca      	bne.n	800354c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035cc:	e042      	b.n	8003654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d119      	bne.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e029      	b.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fcaa 	bl	8001f68 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d1b5      	bne.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d11b      	bne.n	80036bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e272      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8087 	beq.w	80037f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036e8:	4b92      	ldr	r3, [pc, #584]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d00c      	beq.n	800370e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036f4:	4b8f      	ldr	r3, [pc, #572]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d112      	bne.n	8003726 <HAL_RCC_OscConfig+0x5e>
 8003700:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d10b      	bne.n	8003726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370e:	4b89      	ldr	r3, [pc, #548]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d06c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x12c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d168      	bne.n	80037f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e24c      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x76>
 8003730:	4b80      	ldr	r3, [pc, #512]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a7f      	ldr	r2, [pc, #508]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e02e      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x98>
 8003746:	4b7b      	ldr	r3, [pc, #492]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a7a      	ldr	r2, [pc, #488]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800374c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b78      	ldr	r3, [pc, #480]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a77      	ldr	r2, [pc, #476]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e01d      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0xbc>
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a71      	ldr	r2, [pc, #452]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b6f      	ldr	r3, [pc, #444]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6e      	ldr	r2, [pc, #440]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e00b      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 8003784:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a67      	ldr	r2, [pc, #412]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fbe0 	bl	8001f68 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe fbdc 	bl	8001f68 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e200      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0xe4>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fbcc 	bl	8001f68 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fbc8 	bl	8001f68 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e1ec      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e6:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x10c>
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d063      	beq.n	80038ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003802:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800380e:	4b49      	ldr	r3, [pc, #292]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b08      	cmp	r3, #8
 8003818:	d11c      	bne.n	8003854 <HAL_RCC_OscConfig+0x18c>
 800381a:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d116      	bne.n	8003854 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_RCC_OscConfig+0x176>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e1c0      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4939      	ldr	r1, [pc, #228]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	e03a      	b.n	80038ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <HAL_RCC_OscConfig+0x270>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fb81 	bl	8001f68 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386a:	f7fe fb7d 	bl	8001f68 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e1a1      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4927      	ldr	r1, [pc, #156]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	600b      	str	r3, [r1, #0]
 800389c:	e015      	b.n	80038ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <HAL_RCC_OscConfig+0x270>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe fb60 	bl	8001f68 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fe fb5c 	bl	8001f68 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e180      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d03a      	beq.n	800394c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d019      	beq.n	8003912 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038de:	4b17      	ldr	r3, [pc, #92]	; (800393c <HAL_RCC_OscConfig+0x274>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fe fb40 	bl	8001f68 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fe fb3c 	bl	8001f68 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e160      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_RCC_OscConfig+0x26c>)
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800390a:	2001      	movs	r0, #1
 800390c:	f000 fad8 	bl	8003ec0 <RCC_Delay>
 8003910:	e01c      	b.n	800394c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_RCC_OscConfig+0x274>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003918:	f7fe fb26 	bl	8001f68 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391e:	e00f      	b.n	8003940 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003920:	f7fe fb22 	bl	8001f68 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d908      	bls.n	8003940 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e146      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	42420000 	.word	0x42420000
 800393c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003940:	4b92      	ldr	r3, [pc, #584]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e9      	bne.n	8003920 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a6 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395e:	4b8b      	ldr	r3, [pc, #556]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4a87      	ldr	r2, [pc, #540]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	61d3      	str	r3, [r2, #28]
 8003976:	4b85      	ldr	r3, [pc, #532]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b82      	ldr	r3, [pc, #520]	; (8003b90 <HAL_RCC_OscConfig+0x4c8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d118      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <HAL_RCC_OscConfig+0x4c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7e      	ldr	r2, [pc, #504]	; (8003b90 <HAL_RCC_OscConfig+0x4c8>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe fae3 	bl	8001f68 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a6:	f7fe fadf 	bl	8001f68 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b64      	cmp	r3, #100	; 0x64
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e103      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	4b75      	ldr	r3, [pc, #468]	; (8003b90 <HAL_RCC_OscConfig+0x4c8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x312>
 80039cc:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a6e      	ldr	r2, [pc, #440]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6213      	str	r3, [r2, #32]
 80039d8:	e02d      	b.n	8003a36 <HAL_RCC_OscConfig+0x36e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x334>
 80039e2:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a69      	ldr	r2, [pc, #420]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6213      	str	r3, [r2, #32]
 80039ee:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4a66      	ldr	r2, [pc, #408]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	6213      	str	r3, [r2, #32]
 80039fa:	e01c      	b.n	8003a36 <HAL_RCC_OscConfig+0x36e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b05      	cmp	r3, #5
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCC_OscConfig+0x356>
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a60      	ldr	r2, [pc, #384]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	f043 0304 	orr.w	r3, r3, #4
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4a5d      	ldr	r2, [pc, #372]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	e00b      	b.n	8003a36 <HAL_RCC_OscConfig+0x36e>
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a5a      	ldr	r2, [pc, #360]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6213      	str	r3, [r2, #32]
 8003a2a:	4b58      	ldr	r3, [pc, #352]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d015      	beq.n	8003a6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe fa93 	bl	8001f68 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fe fa8f 	bl	8001f68 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e0b1      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ee      	beq.n	8003a46 <HAL_RCC_OscConfig+0x37e>
 8003a68:	e014      	b.n	8003a94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fa7d 	bl	8001f68 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe fa79 	bl	8001f68 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e09b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a88:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ee      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d105      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9a:	4b3c      	ldr	r3, [pc, #240]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8087 	beq.w	8003bbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d061      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d146      	bne.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac4:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <HAL_RCC_OscConfig+0x4cc>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fe fa4d 	bl	8001f68 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fe fa49 	bl	8001f68 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e06d      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d108      	bne.n	8003b0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4921      	ldr	r1, [pc, #132]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a19      	ldr	r1, [r3, #32]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	491b      	ldr	r1, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x4cc>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fa1d 	bl	8001f68 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe fa19 	bl	8001f68 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e03d      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x46a>
 8003b50:	e035      	b.n	8003bbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b52:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <HAL_RCC_OscConfig+0x4cc>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe fa06 	bl	8001f68 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe fa02 	bl	8001f68 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e026      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x498>
 8003b7e:	e01e      	b.n	8003bbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d107      	bne.n	8003b98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e019      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40007000 	.word	0x40007000
 8003b94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_OscConfig+0x500>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000

08003bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0d0      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d910      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4965      	ldr	r1, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d040      	beq.n	8003cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e073      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06b      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4936      	ldr	r1, [pc, #216]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fe f954 	bl	8001f68 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fe f950 	bl	8001f68 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e053      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d210      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 0207 	bic.w	r2, r3, #7
 8003d02:	4922      	ldr	r1, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1cc>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe f8b2 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	40021000 	.word	0x40021000
 8003d94:	080066c8 	.word	0x080066c8
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	20000004 	.word	0x20000004

08003da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	b490      	push	{r4, r7}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003da6:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xac>)
 8003da8:	1d3c      	adds	r4, r7, #4
 8003daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003db0:	f240 2301 	movw	r3, #513	; 0x201
 8003db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d002      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_GetSysClockFreq+0x46>
 8003dde:	e02b      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de0:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003de2:	623b      	str	r3, [r7, #32]
      break;
 8003de4:	e02b      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	0c9b      	lsrs	r3, r3, #18
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	3328      	adds	r3, #40	; 0x28
 8003df0:	443b      	add	r3, r7
 8003df2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003df6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d012      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0c5b      	lsrs	r3, r3, #17
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	3328      	adds	r3, #40	; 0x28
 8003e0e:	443b      	add	r3, r7
 8003e10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e1a:	fb03 f202 	mul.w	r2, r3, r2
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	e004      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	623b      	str	r3, [r7, #32]
      break;
 8003e36:	e002      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e3a:	623b      	str	r3, [r7, #32]
      break;
 8003e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc90      	pop	{r4, r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	080066b8 	.word	0x080066b8
 8003e50:	40021000 	.word	0x40021000
 8003e54:	007a1200 	.word	0x007a1200
 8003e58:	003d0900 	.word	0x003d0900

08003e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b02      	ldr	r3, [pc, #8]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20000000 	.word	0x20000000

08003e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e74:	f7ff fff2 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	080066d8 	.word	0x080066d8

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e9c:	f7ff ffde 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	080066d8 	.word	0x080066d8

08003ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <RCC_Delay+0x34>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <RCC_Delay+0x38>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	0a5b      	lsrs	r3, r3, #9
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003edc:	bf00      	nop
  }
  while (Delay --);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e5a      	subs	r2, r3, #1
 8003ee2:	60fa      	str	r2, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f9      	bne.n	8003edc <RCC_Delay+0x1c>
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	10624dd3 	.word	0x10624dd3

08003efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e03f      	b.n	8003f8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd ff0e 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fc25 	bl	8004790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08a      	sub	sp, #40	; 0x28
 8003f9a:	af02      	add	r7, sp, #8
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d17c      	bne.n	80040b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_Transmit+0x2c>
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e075      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x3e>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e06e      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2221      	movs	r2, #33	; 0x21
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fea:	f7fd ffbd 	bl	8001f68 <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d108      	bne.n	8004018 <HAL_UART_Transmit+0x82>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e003      	b.n	8004020 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004028:	e02a      	b.n	8004080 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fa11 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e036      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004058:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	3302      	adds	r3, #2
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e007      	b.n	8004072 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1cf      	bne.n	800402a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2200      	movs	r2, #0
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f9e1 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e006      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_UART_IRQHandler+0x52>
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa99 	bl	800463e <UART_Receive_IT>
      return;
 800410c:	e17b      	b.n	8004406 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80b1 	beq.w	8004278 <HAL_UART_IRQHandler+0x1bc>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_UART_IRQHandler+0x70>
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a6 	beq.w	8004278 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_UART_IRQHandler+0x90>
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f043 0201 	orr.w	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_UART_IRQHandler+0xb0>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f043 0202 	orr.w	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_UART_IRQHandler+0xd0>
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f043 0204 	orr.w	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00f      	beq.n	80041b6 <HAL_UART_IRQHandler+0xfa>
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d104      	bne.n	80041aa <HAL_UART_IRQHandler+0xee>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0208 	orr.w	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 811e 	beq.w	80043fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_UART_IRQHandler+0x11e>
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fa32 	bl	800463e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <HAL_UART_IRQHandler+0x146>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d031      	beq.n	8004266 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f974 	bl	80044f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d023      	beq.n	800425e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d013      	beq.n	8004256 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	4a76      	ldr	r2, [pc, #472]	; (800440c <HAL_UART_IRQHandler+0x350>)
 8004234:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe f810 	bl	8002260 <HAL_DMA_Abort_IT>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	e00e      	b.n	8004274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8ec 	bl	8004434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	e00a      	b.n	8004274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8e8 	bl	8004434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e006      	b.n	8004274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f8e4 	bl	8004434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004272:	e0c3      	b.n	80043fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	bf00      	nop
    return;
 8004276:	e0c1      	b.n	80043fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	2b01      	cmp	r3, #1
 800427e:	f040 80a1 	bne.w	80043c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 809b 	beq.w	80043c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8095 	beq.w	80043c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d04e      	beq.n	800435c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80042c8:	8a3b      	ldrh	r3, [r7, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8098 	beq.w	8004400 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d4:	8a3a      	ldrh	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	f080 8092 	bcs.w	8004400 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8a3a      	ldrh	r2, [r7, #16]
 80042e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d02b      	beq.n	8004344 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0210 	bic.w	r2, r2, #16
 8004338:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd ff53 	bl	80021ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800434c:	b29b      	uxth	r3, r3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	b29b      	uxth	r3, r3
 8004352:	4619      	mov	r1, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f876 	bl	8004446 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800435a:	e051      	b.n	8004400 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004364:	b29b      	uxth	r3, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d047      	beq.n	8004404 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004374:	8a7b      	ldrh	r3, [r7, #18]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d044      	beq.n	8004404 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004388:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0210 	bic.w	r2, r2, #16
 80043b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043b8:	8a7b      	ldrh	r3, [r7, #18]
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f842 	bl	8004446 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043c2:	e01f      	b.n	8004404 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_UART_IRQHandler+0x324>
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8c9 	bl	8004570 <UART_Transmit_IT>
    return;
 80043de:	e012      	b.n	8004406 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <HAL_UART_IRQHandler+0x34a>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f90a 	bl	800460e <UART_EndTransmit_IT>
    return;
 80043fa:	e004      	b.n	8004406 <HAL_UART_IRQHandler+0x34a>
    return;
 80043fc:	bf00      	nop
 80043fe:	e002      	b.n	8004406 <HAL_UART_IRQHandler+0x34a>
      return;
 8004400:	bf00      	nop
 8004402:	e000      	b.n	8004406 <HAL_UART_IRQHandler+0x34a>
      return;
 8004404:	bf00      	nop
  }
}
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	08004549 	.word	0x08004549

08004410 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446c:	e02c      	b.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d028      	beq.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0x30>
 800447c:	f7fd fd74 	bl	8001f68 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d21d      	bcs.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800449a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e00f      	b.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d0c3      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004506:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0210 	bic.w	r2, r2, #16
 800452e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff ff66 	bl	8004434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b21      	cmp	r3, #33	; 0x21
 8004582:	d13e      	bne.n	8004602 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458c:	d114      	bne.n	80045b8 <UART_Transmit_IT+0x48>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d110      	bne.n	80045b8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]
 80045b6:	e008      	b.n	80045ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6211      	str	r1, [r2, #32]
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4619      	mov	r1, r3
 80045d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff feee 	bl	8004410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b22      	cmp	r3, #34	; 0x22
 8004650:	f040 8099 	bne.w	8004786 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d117      	bne.n	800468e <UART_Receive_IT+0x50>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d113      	bne.n	800468e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	b29a      	uxth	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28
 800468c:	e026      	b.n	80046dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d007      	beq.n	80046b2 <UART_Receive_IT+0x74>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <UART_Receive_IT+0x82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e008      	b.n	80046d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4619      	mov	r1, r3
 80046ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d148      	bne.n	8004782 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0220 	bic.w	r2, r2, #32
 80046fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	2b01      	cmp	r3, #1
 800472e:	d123      	bne.n	8004778 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0210 	bic.w	r2, r2, #16
 8004744:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b10      	cmp	r3, #16
 8004752:	d10a      	bne.n	800476a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fe68 	bl	8004446 <HAL_UARTEx_RxEventCallback>
 8004776:	e002      	b.n	800477e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fe52 	bl	8004422 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e002      	b.n	8004788 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047ca:	f023 030c 	bic.w	r3, r3, #12
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	430b      	orrs	r3, r1
 80047d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2c      	ldr	r2, [pc, #176]	; (80048a4 <UART_SetConfig+0x114>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d103      	bne.n	8004800 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047f8:	f7ff fb4e 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	e002      	b.n	8004806 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7ff fb36 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8004804:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009a      	lsls	r2, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <UART_SetConfig+0x118>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	0119      	lsls	r1, r3, #4
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f2f3 	udiv	r2, r2, r3
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <UART_SetConfig+0x118>)
 800483e:	fba3 0302 	umull	r0, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2064      	movs	r0, #100	; 0x64
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	3332      	adds	r3, #50	; 0x32
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <UART_SetConfig+0x118>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485c:	4419      	add	r1, r3
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009a      	lsls	r2, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	fbb2 f2f3 	udiv	r2, r2, r3
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <UART_SetConfig+0x118>)
 8004876:	fba3 0302 	umull	r0, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	3332      	adds	r3, #50	; 0x32
 8004888:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <UART_SetConfig+0x118>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 020f 	and.w	r2, r3, #15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	440a      	add	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40013800 	.word	0x40013800
 80048a8:	51eb851f 	.word	0x51eb851f

080048ac <__errno>:
 80048ac:	4b01      	ldr	r3, [pc, #4]	; (80048b4 <__errno+0x8>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <__libc_init_array>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	2600      	movs	r6, #0
 80048bc:	4d0c      	ldr	r5, [pc, #48]	; (80048f0 <__libc_init_array+0x38>)
 80048be:	4c0d      	ldr	r4, [pc, #52]	; (80048f4 <__libc_init_array+0x3c>)
 80048c0:	1b64      	subs	r4, r4, r5
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	42a6      	cmp	r6, r4
 80048c6:	d109      	bne.n	80048dc <__libc_init_array+0x24>
 80048c8:	f001 fee8 	bl	800669c <_init>
 80048cc:	2600      	movs	r6, #0
 80048ce:	4d0a      	ldr	r5, [pc, #40]	; (80048f8 <__libc_init_array+0x40>)
 80048d0:	4c0a      	ldr	r4, [pc, #40]	; (80048fc <__libc_init_array+0x44>)
 80048d2:	1b64      	subs	r4, r4, r5
 80048d4:	10a4      	asrs	r4, r4, #2
 80048d6:	42a6      	cmp	r6, r4
 80048d8:	d105      	bne.n	80048e6 <__libc_init_array+0x2e>
 80048da:	bd70      	pop	{r4, r5, r6, pc}
 80048dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e0:	4798      	blx	r3
 80048e2:	3601      	adds	r6, #1
 80048e4:	e7ee      	b.n	80048c4 <__libc_init_array+0xc>
 80048e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ea:	4798      	blx	r3
 80048ec:	3601      	adds	r6, #1
 80048ee:	e7f2      	b.n	80048d6 <__libc_init_array+0x1e>
 80048f0:	080069b0 	.word	0x080069b0
 80048f4:	080069b0 	.word	0x080069b0
 80048f8:	080069b0 	.word	0x080069b0
 80048fc:	080069b4 	.word	0x080069b4

08004900 <__itoa>:
 8004900:	1e93      	subs	r3, r2, #2
 8004902:	2b22      	cmp	r3, #34	; 0x22
 8004904:	b510      	push	{r4, lr}
 8004906:	460c      	mov	r4, r1
 8004908:	d904      	bls.n	8004914 <__itoa+0x14>
 800490a:	2300      	movs	r3, #0
 800490c:	461c      	mov	r4, r3
 800490e:	700b      	strb	r3, [r1, #0]
 8004910:	4620      	mov	r0, r4
 8004912:	bd10      	pop	{r4, pc}
 8004914:	2a0a      	cmp	r2, #10
 8004916:	d109      	bne.n	800492c <__itoa+0x2c>
 8004918:	2800      	cmp	r0, #0
 800491a:	da07      	bge.n	800492c <__itoa+0x2c>
 800491c:	232d      	movs	r3, #45	; 0x2d
 800491e:	700b      	strb	r3, [r1, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	4240      	negs	r0, r0
 8004924:	4421      	add	r1, r4
 8004926:	f000 f80d 	bl	8004944 <__utoa>
 800492a:	e7f1      	b.n	8004910 <__itoa+0x10>
 800492c:	2100      	movs	r1, #0
 800492e:	e7f9      	b.n	8004924 <__itoa+0x24>

08004930 <itoa>:
 8004930:	f7ff bfe6 	b.w	8004900 <__itoa>

08004934 <memset>:
 8004934:	4603      	mov	r3, r0
 8004936:	4402      	add	r2, r0
 8004938:	4293      	cmp	r3, r2
 800493a:	d100      	bne.n	800493e <memset+0xa>
 800493c:	4770      	bx	lr
 800493e:	f803 1b01 	strb.w	r1, [r3], #1
 8004942:	e7f9      	b.n	8004938 <memset+0x4>

08004944 <__utoa>:
 8004944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004946:	b08b      	sub	sp, #44	; 0x2c
 8004948:	4605      	mov	r5, r0
 800494a:	460b      	mov	r3, r1
 800494c:	466e      	mov	r6, sp
 800494e:	4c1d      	ldr	r4, [pc, #116]	; (80049c4 <__utoa+0x80>)
 8004950:	f104 0c20 	add.w	ip, r4, #32
 8004954:	4637      	mov	r7, r6
 8004956:	6820      	ldr	r0, [r4, #0]
 8004958:	6861      	ldr	r1, [r4, #4]
 800495a:	3408      	adds	r4, #8
 800495c:	c703      	stmia	r7!, {r0, r1}
 800495e:	4564      	cmp	r4, ip
 8004960:	463e      	mov	r6, r7
 8004962:	d1f7      	bne.n	8004954 <__utoa+0x10>
 8004964:	7921      	ldrb	r1, [r4, #4]
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	7139      	strb	r1, [r7, #4]
 800496a:	1e91      	subs	r1, r2, #2
 800496c:	2922      	cmp	r1, #34	; 0x22
 800496e:	6038      	str	r0, [r7, #0]
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	d904      	bls.n	8004980 <__utoa+0x3c>
 8004976:	7019      	strb	r1, [r3, #0]
 8004978:	460b      	mov	r3, r1
 800497a:	4618      	mov	r0, r3
 800497c:	b00b      	add	sp, #44	; 0x2c
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004980:	1e58      	subs	r0, r3, #1
 8004982:	4684      	mov	ip, r0
 8004984:	fbb5 f7f2 	udiv	r7, r5, r2
 8004988:	fb02 5617 	mls	r6, r2, r7, r5
 800498c:	3628      	adds	r6, #40	; 0x28
 800498e:	446e      	add	r6, sp
 8004990:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004994:	460c      	mov	r4, r1
 8004996:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800499a:	462e      	mov	r6, r5
 800499c:	42b2      	cmp	r2, r6
 800499e:	463d      	mov	r5, r7
 80049a0:	f101 0101 	add.w	r1, r1, #1
 80049a4:	d9ee      	bls.n	8004984 <__utoa+0x40>
 80049a6:	2200      	movs	r2, #0
 80049a8:	545a      	strb	r2, [r3, r1]
 80049aa:	1919      	adds	r1, r3, r4
 80049ac:	1aa5      	subs	r5, r4, r2
 80049ae:	42aa      	cmp	r2, r5
 80049b0:	dae3      	bge.n	800497a <__utoa+0x36>
 80049b2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80049b6:	780e      	ldrb	r6, [r1, #0]
 80049b8:	3201      	adds	r2, #1
 80049ba:	7006      	strb	r6, [r0, #0]
 80049bc:	f801 5901 	strb.w	r5, [r1], #-1
 80049c0:	e7f4      	b.n	80049ac <__utoa+0x68>
 80049c2:	bf00      	nop
 80049c4:	080066e0 	.word	0x080066e0

080049c8 <ceil>:
 80049c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049cc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80049d0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80049d4:	2e13      	cmp	r6, #19
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4607      	mov	r7, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	4605      	mov	r5, r0
 80049e0:	dc31      	bgt.n	8004a46 <ceil+0x7e>
 80049e2:	2e00      	cmp	r6, #0
 80049e4:	da12      	bge.n	8004a0c <ceil+0x44>
 80049e6:	a334      	add	r3, pc, #208	; (adr r3, 8004ab8 <ceil+0xf0>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb fbb6 	bl	800015c <__adddf3>
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	f7fb fff8 	bl	80009e8 <__aeabi_dcmpgt>
 80049f8:	b128      	cbz	r0, 8004a06 <ceil+0x3e>
 80049fa:	2c00      	cmp	r4, #0
 80049fc:	db56      	blt.n	8004aac <ceil+0xe4>
 80049fe:	433c      	orrs	r4, r7
 8004a00:	d058      	beq.n	8004ab4 <ceil+0xec>
 8004a02:	2500      	movs	r5, #0
 8004a04:	4c2e      	ldr	r4, [pc, #184]	; (8004ac0 <ceil+0xf8>)
 8004a06:	4623      	mov	r3, r4
 8004a08:	462f      	mov	r7, r5
 8004a0a:	e025      	b.n	8004a58 <ceil+0x90>
 8004a0c:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <ceil+0xfc>)
 8004a0e:	fa42 f806 	asr.w	r8, r2, r6
 8004a12:	ea01 0208 	and.w	r2, r1, r8
 8004a16:	4302      	orrs	r2, r0
 8004a18:	d01e      	beq.n	8004a58 <ceil+0x90>
 8004a1a:	a327      	add	r3, pc, #156	; (adr r3, 8004ab8 <ceil+0xf0>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fb9c 	bl	800015c <__adddf3>
 8004a24:	2200      	movs	r2, #0
 8004a26:	2300      	movs	r3, #0
 8004a28:	f7fb ffde 	bl	80009e8 <__aeabi_dcmpgt>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d0ea      	beq.n	8004a06 <ceil+0x3e>
 8004a30:	2c00      	cmp	r4, #0
 8004a32:	bfc2      	ittt	gt
 8004a34:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8004a38:	fa43 f606 	asrgt.w	r6, r3, r6
 8004a3c:	19a4      	addgt	r4, r4, r6
 8004a3e:	2500      	movs	r5, #0
 8004a40:	ea24 0408 	bic.w	r4, r4, r8
 8004a44:	e7df      	b.n	8004a06 <ceil+0x3e>
 8004a46:	2e33      	cmp	r6, #51	; 0x33
 8004a48:	dd0a      	ble.n	8004a60 <ceil+0x98>
 8004a4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004a4e:	d103      	bne.n	8004a58 <ceil+0x90>
 8004a50:	f7fb fb84 	bl	800015c <__adddf3>
 8004a54:	4607      	mov	r7, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4638      	mov	r0, r7
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004a68:	fa22 f808 	lsr.w	r8, r2, r8
 8004a6c:	ea18 0f00 	tst.w	r8, r0
 8004a70:	d0f2      	beq.n	8004a58 <ceil+0x90>
 8004a72:	a311      	add	r3, pc, #68	; (adr r3, 8004ab8 <ceil+0xf0>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fb70 	bl	800015c <__adddf3>
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f7fb ffb2 	bl	80009e8 <__aeabi_dcmpgt>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d0be      	beq.n	8004a06 <ceil+0x3e>
 8004a88:	2c00      	cmp	r4, #0
 8004a8a:	dd02      	ble.n	8004a92 <ceil+0xca>
 8004a8c:	2e14      	cmp	r6, #20
 8004a8e:	d103      	bne.n	8004a98 <ceil+0xd0>
 8004a90:	3401      	adds	r4, #1
 8004a92:	ea25 0508 	bic.w	r5, r5, r8
 8004a96:	e7b6      	b.n	8004a06 <ceil+0x3e>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004a9e:	fa03 f606 	lsl.w	r6, r3, r6
 8004aa2:	4435      	add	r5, r6
 8004aa4:	42bd      	cmp	r5, r7
 8004aa6:	bf38      	it	cc
 8004aa8:	18e4      	addcc	r4, r4, r3
 8004aaa:	e7f2      	b.n	8004a92 <ceil+0xca>
 8004aac:	2500      	movs	r5, #0
 8004aae:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004ab2:	e7a8      	b.n	8004a06 <ceil+0x3e>
 8004ab4:	4625      	mov	r5, r4
 8004ab6:	e7a6      	b.n	8004a06 <ceil+0x3e>
 8004ab8:	8800759c 	.word	0x8800759c
 8004abc:	7e37e43c 	.word	0x7e37e43c
 8004ac0:	3ff00000 	.word	0x3ff00000
 8004ac4:	000fffff 	.word	0x000fffff

08004ac8 <round>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004ace:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8004ad2:	2c13      	cmp	r4, #19
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4606      	mov	r6, r0
 8004ada:	460d      	mov	r5, r1
 8004adc:	dc19      	bgt.n	8004b12 <round+0x4a>
 8004ade:	2c00      	cmp	r4, #0
 8004ae0:	da09      	bge.n	8004af6 <round+0x2e>
 8004ae2:	3401      	adds	r4, #1
 8004ae4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004ae8:	d103      	bne.n	8004af2 <round+0x2a>
 8004aea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004aee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004af2:	2200      	movs	r2, #0
 8004af4:	e02a      	b.n	8004b4c <round+0x84>
 8004af6:	4917      	ldr	r1, [pc, #92]	; (8004b54 <round+0x8c>)
 8004af8:	4121      	asrs	r1, r4
 8004afa:	ea03 0001 	and.w	r0, r3, r1
 8004afe:	4302      	orrs	r2, r0
 8004b00:	d010      	beq.n	8004b24 <round+0x5c>
 8004b02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b06:	fa42 f404 	asr.w	r4, r2, r4
 8004b0a:	4423      	add	r3, r4
 8004b0c:	ea23 0301 	bic.w	r3, r3, r1
 8004b10:	e7ef      	b.n	8004af2 <round+0x2a>
 8004b12:	2c33      	cmp	r4, #51	; 0x33
 8004b14:	dd09      	ble.n	8004b2a <round+0x62>
 8004b16:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004b1a:	d103      	bne.n	8004b24 <round+0x5c>
 8004b1c:	f7fb fb1e 	bl	800015c <__adddf3>
 8004b20:	4606      	mov	r6, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	4630      	mov	r0, r6
 8004b26:	4629      	mov	r1, r5
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b2e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004b32:	40f9      	lsrs	r1, r7
 8004b34:	4208      	tst	r0, r1
 8004b36:	d0f5      	beq.n	8004b24 <round+0x5c>
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004b3e:	fa00 f404 	lsl.w	r4, r0, r4
 8004b42:	1912      	adds	r2, r2, r4
 8004b44:	bf28      	it	cs
 8004b46:	181b      	addcs	r3, r3, r0
 8004b48:	ea22 0201 	bic.w	r2, r2, r1
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	e7e6      	b.n	8004b20 <round+0x58>
 8004b52:	bf00      	nop
 8004b54:	000fffff 	.word	0x000fffff

08004b58 <sin>:
 8004b58:	b530      	push	{r4, r5, lr}
 8004b5a:	4a20      	ldr	r2, [pc, #128]	; (8004bdc <sin+0x84>)
 8004b5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b60:	4293      	cmp	r3, r2
 8004b62:	b087      	sub	sp, #28
 8004b64:	dc06      	bgt.n	8004b74 <sin+0x1c>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2200      	movs	r2, #0
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f001 f893 	bl	8005c98 <__kernel_sin>
 8004b72:	e006      	b.n	8004b82 <sin+0x2a>
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <sin+0x88>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	dd05      	ble.n	8004b86 <sin+0x2e>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	f7fb faeb 	bl	8000158 <__aeabi_dsub>
 8004b82:	b007      	add	sp, #28
 8004b84:	bd30      	pop	{r4, r5, pc}
 8004b86:	aa02      	add	r2, sp, #8
 8004b88:	f000 f9de 	bl	8004f48 <__ieee754_rem_pio2>
 8004b8c:	f000 0003 	and.w	r0, r0, #3
 8004b90:	2801      	cmp	r0, #1
 8004b92:	d009      	beq.n	8004ba8 <sin+0x50>
 8004b94:	2802      	cmp	r0, #2
 8004b96:	d00e      	beq.n	8004bb6 <sin+0x5e>
 8004b98:	b9c0      	cbnz	r0, 8004bcc <sin+0x74>
 8004b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba6:	e7e2      	b.n	8004b6e <sin+0x16>
 8004ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bb0:	f000 fc72 	bl	8005498 <__kernel_cos>
 8004bb4:	e7e5      	b.n	8004b82 <sin+0x2a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bc2:	f001 f869 	bl	8005c98 <__kernel_sin>
 8004bc6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004bca:	e7da      	b.n	8004b82 <sin+0x2a>
 8004bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd4:	f000 fc60 	bl	8005498 <__kernel_cos>
 8004bd8:	e7f5      	b.n	8004bc6 <sin+0x6e>
 8004bda:	bf00      	nop
 8004bdc:	3fe921fb 	.word	0x3fe921fb
 8004be0:	7fefffff 	.word	0x7fefffff

08004be4 <atan2>:
 8004be4:	f000 b858 	b.w	8004c98 <__ieee754_atan2>

08004be8 <log10>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	4604      	mov	r4, r0
 8004bec:	460d      	mov	r5, r1
 8004bee:	f000 f927 	bl	8004e40 <__ieee754_log10>
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb fefd 	bl	80009fc <__aeabi_dcmpun>
 8004c02:	b998      	cbnz	r0, 8004c2c <log10+0x44>
 8004c04:	2200      	movs	r2, #0
 8004c06:	2300      	movs	r3, #0
 8004c08:	4620      	mov	r0, r4
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	f7fb fed8 	bl	80009c0 <__aeabi_dcmple>
 8004c10:	b160      	cbz	r0, 8004c2c <log10+0x44>
 8004c12:	2200      	movs	r2, #0
 8004c14:	2300      	movs	r3, #0
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb febd 	bl	8000998 <__aeabi_dcmpeq>
 8004c1e:	b140      	cbz	r0, 8004c32 <log10+0x4a>
 8004c20:	f7ff fe44 	bl	80048ac <__errno>
 8004c24:	2322      	movs	r3, #34	; 0x22
 8004c26:	2600      	movs	r6, #0
 8004c28:	4f06      	ldr	r7, [pc, #24]	; (8004c44 <log10+0x5c>)
 8004c2a:	6003      	str	r3, [r0, #0]
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	4639      	mov	r1, r7
 8004c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c32:	f7ff fe3b 	bl	80048ac <__errno>
 8004c36:	2321      	movs	r3, #33	; 0x21
 8004c38:	6003      	str	r3, [r0, #0]
 8004c3a:	4803      	ldr	r0, [pc, #12]	; (8004c48 <log10+0x60>)
 8004c3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c40:	f001 baf2 	b.w	8006228 <nan>
 8004c44:	fff00000 	.word	0xfff00000
 8004c48:	08006704 	.word	0x08006704

08004c4c <sqrt>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	4606      	mov	r6, r0
 8004c50:	460f      	mov	r7, r1
 8004c52:	f000 fb71 	bl	8005338 <__ieee754_sqrt>
 8004c56:	4632      	mov	r2, r6
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	f7fb fecb 	bl	80009fc <__aeabi_dcmpun>
 8004c66:	b990      	cbnz	r0, 8004c8e <sqrt+0x42>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f7fb fe9c 	bl	80009ac <__aeabi_dcmplt>
 8004c74:	b158      	cbz	r0, 8004c8e <sqrt+0x42>
 8004c76:	f7ff fe19 	bl	80048ac <__errno>
 8004c7a:	2321      	movs	r3, #33	; 0x21
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	6003      	str	r3, [r0, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	f7fb fd49 	bl	800071c <__aeabi_ddiv>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c94:	0000      	movs	r0, r0
	...

08004c98 <__ieee754_atan2>:
 8004c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	4692      	mov	sl, r2
 8004c9e:	4699      	mov	r9, r3
 8004ca0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ca4:	461f      	mov	r7, r3
 8004ca6:	f1ca 0300 	rsb	r3, sl, #0
 8004caa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8004e30 <__ieee754_atan2+0x198>
 8004cae:	ea43 030a 	orr.w	r3, r3, sl
 8004cb2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004cb6:	4573      	cmp	r3, lr
 8004cb8:	4604      	mov	r4, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	d808      	bhi.n	8004cd0 <__ieee754_atan2+0x38>
 8004cbe:	4246      	negs	r6, r0
 8004cc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cc4:	4306      	orrs	r6, r0
 8004cc6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8004cca:	4576      	cmp	r6, lr
 8004ccc:	468c      	mov	ip, r1
 8004cce:	d908      	bls.n	8004ce2 <__ieee754_atan2+0x4a>
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	f7fb fa40 	bl	800015c <__adddf3>
 8004cdc:	4604      	mov	r4, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	e019      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004ce2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8004ce6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8004cea:	ea56 060a 	orrs.w	r6, r6, sl
 8004cee:	d103      	bne.n	8004cf8 <__ieee754_atan2+0x60>
 8004cf0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	f001 b888 	b.w	8005e08 <atan>
 8004cf8:	17be      	asrs	r6, r7, #30
 8004cfa:	f006 0602 	and.w	r6, r6, #2
 8004cfe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8004d02:	ea53 0100 	orrs.w	r1, r3, r0
 8004d06:	d10a      	bne.n	8004d1e <__ieee754_atan2+0x86>
 8004d08:	2e02      	cmp	r6, #2
 8004d0a:	d067      	beq.n	8004ddc <__ieee754_atan2+0x144>
 8004d0c:	2e03      	cmp	r6, #3
 8004d0e:	d102      	bne.n	8004d16 <__ieee754_atan2+0x7e>
 8004d10:	a53b      	add	r5, pc, #236	; (adr r5, 8004e00 <__ieee754_atan2+0x168>)
 8004d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1e:	ea52 010a 	orrs.w	r1, r2, sl
 8004d22:	d106      	bne.n	8004d32 <__ieee754_atan2+0x9a>
 8004d24:	f1bc 0f00 	cmp.w	ip, #0
 8004d28:	da63      	bge.n	8004df2 <__ieee754_atan2+0x15a>
 8004d2a:	a537      	add	r5, pc, #220	; (adr r5, 8004e08 <__ieee754_atan2+0x170>)
 8004d2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004d30:	e7f1      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004d32:	4572      	cmp	r2, lr
 8004d34:	d10f      	bne.n	8004d56 <__ieee754_atan2+0xbe>
 8004d36:	4293      	cmp	r3, r2
 8004d38:	f106 36ff 	add.w	r6, r6, #4294967295
 8004d3c:	d107      	bne.n	8004d4e <__ieee754_atan2+0xb6>
 8004d3e:	2e02      	cmp	r6, #2
 8004d40:	d850      	bhi.n	8004de4 <__ieee754_atan2+0x14c>
 8004d42:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <__ieee754_atan2+0x19c>)
 8004d44:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004d48:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004d4c:	e7e3      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004d4e:	2e02      	cmp	r6, #2
 8004d50:	d84c      	bhi.n	8004dec <__ieee754_atan2+0x154>
 8004d52:	4b39      	ldr	r3, [pc, #228]	; (8004e38 <__ieee754_atan2+0x1a0>)
 8004d54:	e7f6      	b.n	8004d44 <__ieee754_atan2+0xac>
 8004d56:	4573      	cmp	r3, lr
 8004d58:	d0e4      	beq.n	8004d24 <__ieee754_atan2+0x8c>
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004d60:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004d64:	da20      	bge.n	8004da8 <__ieee754_atan2+0x110>
 8004d66:	2f00      	cmp	r7, #0
 8004d68:	da01      	bge.n	8004d6e <__ieee754_atan2+0xd6>
 8004d6a:	323c      	adds	r2, #60	; 0x3c
 8004d6c:	db20      	blt.n	8004db0 <__ieee754_atan2+0x118>
 8004d6e:	4652      	mov	r2, sl
 8004d70:	464b      	mov	r3, r9
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	f7fb fcd1 	bl	800071c <__aeabi_ddiv>
 8004d7a:	f001 f9cf 	bl	800611c <fabs>
 8004d7e:	f001 f843 	bl	8005e08 <atan>
 8004d82:	4604      	mov	r4, r0
 8004d84:	460d      	mov	r5, r1
 8004d86:	2e01      	cmp	r6, #1
 8004d88:	d015      	beq.n	8004db6 <__ieee754_atan2+0x11e>
 8004d8a:	2e02      	cmp	r6, #2
 8004d8c:	d017      	beq.n	8004dbe <__ieee754_atan2+0x126>
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d0c1      	beq.n	8004d16 <__ieee754_atan2+0x7e>
 8004d92:	a31f      	add	r3, pc, #124	; (adr r3, 8004e10 <__ieee754_atan2+0x178>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7fb f9dc 	bl	8000158 <__aeabi_dsub>
 8004da0:	a31d      	add	r3, pc, #116	; (adr r3, 8004e18 <__ieee754_atan2+0x180>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	e016      	b.n	8004dd6 <__ieee754_atan2+0x13e>
 8004da8:	a51d      	add	r5, pc, #116	; (adr r5, 8004e20 <__ieee754_atan2+0x188>)
 8004daa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dae:	e7ea      	b.n	8004d86 <__ieee754_atan2+0xee>
 8004db0:	2400      	movs	r4, #0
 8004db2:	2500      	movs	r5, #0
 8004db4:	e7e7      	b.n	8004d86 <__ieee754_atan2+0xee>
 8004db6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004dba:	461d      	mov	r5, r3
 8004dbc:	e7ab      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004dbe:	a314      	add	r3, pc, #80	; (adr r3, 8004e10 <__ieee754_atan2+0x178>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f7fb f9c6 	bl	8000158 <__aeabi_dsub>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	a111      	add	r1, pc, #68	; (adr r1, 8004e18 <__ieee754_atan2+0x180>)
 8004dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dd6:	f7fb f9bf 	bl	8000158 <__aeabi_dsub>
 8004dda:	e77f      	b.n	8004cdc <__ieee754_atan2+0x44>
 8004ddc:	a50e      	add	r5, pc, #56	; (adr r5, 8004e18 <__ieee754_atan2+0x180>)
 8004dde:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004de2:	e798      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004de4:	a510      	add	r5, pc, #64	; (adr r5, 8004e28 <__ieee754_atan2+0x190>)
 8004de6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dea:	e794      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004dec:	2400      	movs	r4, #0
 8004dee:	2500      	movs	r5, #0
 8004df0:	e791      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004df2:	a50b      	add	r5, pc, #44	; (adr r5, 8004e20 <__ieee754_atan2+0x188>)
 8004df4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004df8:	e78d      	b.n	8004d16 <__ieee754_atan2+0x7e>
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w
 8004e00:	54442d18 	.word	0x54442d18
 8004e04:	c00921fb 	.word	0xc00921fb
 8004e08:	54442d18 	.word	0x54442d18
 8004e0c:	bff921fb 	.word	0xbff921fb
 8004e10:	33145c07 	.word	0x33145c07
 8004e14:	3ca1a626 	.word	0x3ca1a626
 8004e18:	54442d18 	.word	0x54442d18
 8004e1c:	400921fb 	.word	0x400921fb
 8004e20:	54442d18 	.word	0x54442d18
 8004e24:	3ff921fb 	.word	0x3ff921fb
 8004e28:	54442d18 	.word	0x54442d18
 8004e2c:	3fe921fb 	.word	0x3fe921fb
 8004e30:	7ff00000 	.word	0x7ff00000
 8004e34:	08006768 	.word	0x08006768
 8004e38:	08006780 	.word	0x08006780
 8004e3c:	00000000 	.word	0x00000000

08004e40 <__ieee754_log10>:
 8004e40:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e48:	4604      	mov	r4, r0
 8004e4a:	460d      	mov	r5, r1
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	da26      	bge.n	8004e9e <__ieee754_log10+0x5e>
 8004e50:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004e54:	4302      	orrs	r2, r0
 8004e56:	d107      	bne.n	8004e68 <__ieee754_log10+0x28>
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	4936      	ldr	r1, [pc, #216]	; (8004f38 <__ieee754_log10+0xf8>)
 8004e60:	f7fb fc5c 	bl	800071c <__aeabi_ddiv>
 8004e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	da05      	bge.n	8004e78 <__ieee754_log10+0x38>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f7fb f973 	bl	8000158 <__aeabi_dsub>
 8004e72:	2200      	movs	r2, #0
 8004e74:	2300      	movs	r3, #0
 8004e76:	e7f3      	b.n	8004e60 <__ieee754_log10+0x20>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <__ieee754_log10+0xfc>)
 8004e7c:	f7fb fb24 	bl	80004c8 <__aeabi_dmul>
 8004e80:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8004e84:	4604      	mov	r4, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	460b      	mov	r3, r1
 8004e8a:	492d      	ldr	r1, [pc, #180]	; (8004f40 <__ieee754_log10+0x100>)
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	dd08      	ble.n	8004ea2 <__ieee754_log10+0x62>
 8004e90:	4622      	mov	r2, r4
 8004e92:	462b      	mov	r3, r5
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7fb f960 	bl	800015c <__adddf3>
 8004e9c:	e7e2      	b.n	8004e64 <__ieee754_log10+0x24>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	e7f3      	b.n	8004e8a <__ieee754_log10+0x4a>
 8004ea2:	1518      	asrs	r0, r3, #20
 8004ea4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8004ea8:	4410      	add	r0, r2
 8004eaa:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8004eae:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004eb2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8004eb6:	f7fb fa9d 	bl	80003f4 <__aeabi_i2d>
 8004eba:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8004ebe:	3303      	adds	r3, #3
 8004ec0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	460f      	mov	r7, r1
 8004ec8:	4620      	mov	r0, r4
 8004eca:	4629      	mov	r1, r5
 8004ecc:	f001 fa34 	bl	8006338 <__ieee754_log>
 8004ed0:	a313      	add	r3, pc, #76	; (adr r3, 8004f20 <__ieee754_log10+0xe0>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	4689      	mov	r9, r1
 8004eda:	4630      	mov	r0, r6
 8004edc:	4639      	mov	r1, r7
 8004ede:	f7fb faf3 	bl	80004c8 <__aeabi_dmul>
 8004ee2:	a311      	add	r3, pc, #68	; (adr r3, 8004f28 <__ieee754_log10+0xe8>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	4604      	mov	r4, r0
 8004eea:	460d      	mov	r5, r1
 8004eec:	4640      	mov	r0, r8
 8004eee:	4649      	mov	r1, r9
 8004ef0:	f7fb faea 	bl	80004c8 <__aeabi_dmul>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4620      	mov	r0, r4
 8004efa:	4629      	mov	r1, r5
 8004efc:	f7fb f92e 	bl	800015c <__adddf3>
 8004f00:	a30b      	add	r3, pc, #44	; (adr r3, 8004f30 <__ieee754_log10+0xf0>)
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	4604      	mov	r4, r0
 8004f08:	460d      	mov	r5, r1
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	4639      	mov	r1, r7
 8004f0e:	f7fb fadb 	bl	80004c8 <__aeabi_dmul>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4620      	mov	r0, r4
 8004f18:	4629      	mov	r1, r5
 8004f1a:	e7bd      	b.n	8004e98 <__ieee754_log10+0x58>
 8004f1c:	f3af 8000 	nop.w
 8004f20:	11f12b36 	.word	0x11f12b36
 8004f24:	3d59fef3 	.word	0x3d59fef3
 8004f28:	1526e50e 	.word	0x1526e50e
 8004f2c:	3fdbcb7b 	.word	0x3fdbcb7b
 8004f30:	509f6000 	.word	0x509f6000
 8004f34:	3fd34413 	.word	0x3fd34413
 8004f38:	c3500000 	.word	0xc3500000
 8004f3c:	43500000 	.word	0x43500000
 8004f40:	7fefffff 	.word	0x7fefffff
 8004f44:	00000000 	.word	0x00000000

08004f48 <__ieee754_rem_pio2>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	4ac4      	ldr	r2, [pc, #784]	; (8005260 <__ieee754_rem_pio2+0x318>)
 8004f50:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004f54:	b08d      	sub	sp, #52	; 0x34
 8004f56:	4592      	cmp	sl, r2
 8004f58:	9104      	str	r1, [sp, #16]
 8004f5a:	dc07      	bgt.n	8004f6c <__ieee754_rem_pio2+0x24>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e9c4 0100 	strd	r0, r1, [r4]
 8004f64:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004f68:	2500      	movs	r5, #0
 8004f6a:	e024      	b.n	8004fb6 <__ieee754_rem_pio2+0x6e>
 8004f6c:	4abd      	ldr	r2, [pc, #756]	; (8005264 <__ieee754_rem_pio2+0x31c>)
 8004f6e:	4592      	cmp	sl, r2
 8004f70:	dc72      	bgt.n	8005058 <__ieee754_rem_pio2+0x110>
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	4dbc      	ldr	r5, [pc, #752]	; (8005268 <__ieee754_rem_pio2+0x320>)
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	a3ab      	add	r3, pc, #684	; (adr r3, 8005228 <__ieee754_rem_pio2+0x2e0>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	dd36      	ble.n	8004fee <__ieee754_rem_pio2+0xa6>
 8004f80:	f7fb f8ea 	bl	8000158 <__aeabi_dsub>
 8004f84:	45aa      	cmp	sl, r5
 8004f86:	4606      	mov	r6, r0
 8004f88:	460f      	mov	r7, r1
 8004f8a:	d018      	beq.n	8004fbe <__ieee754_rem_pio2+0x76>
 8004f8c:	a3a8      	add	r3, pc, #672	; (adr r3, 8005230 <__ieee754_rem_pio2+0x2e8>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb f8e1 	bl	8000158 <__aeabi_dsub>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	f7fb f8d9 	bl	8000158 <__aeabi_dsub>
 8004fa6:	a3a2      	add	r3, pc, #648	; (adr r3, 8005230 <__ieee754_rem_pio2+0x2e8>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb f8d4 	bl	8000158 <__aeabi_dsub>
 8004fb0:	2501      	movs	r5, #1
 8004fb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	b00d      	add	sp, #52	; 0x34
 8004fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbe:	a39e      	add	r3, pc, #632	; (adr r3, 8005238 <__ieee754_rem_pio2+0x2f0>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb f8c8 	bl	8000158 <__aeabi_dsub>
 8004fc8:	a39d      	add	r3, pc, #628	; (adr r3, 8005240 <__ieee754_rem_pio2+0x2f8>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	4606      	mov	r6, r0
 8004fd0:	460f      	mov	r7, r1
 8004fd2:	f7fb f8c1 	bl	8000158 <__aeabi_dsub>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4630      	mov	r0, r6
 8004fdc:	e9c4 2300 	strd	r2, r3, [r4]
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	f7fb f8b9 	bl	8000158 <__aeabi_dsub>
 8004fe6:	a396      	add	r3, pc, #600	; (adr r3, 8005240 <__ieee754_rem_pio2+0x2f8>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	e7de      	b.n	8004fac <__ieee754_rem_pio2+0x64>
 8004fee:	f7fb f8b5 	bl	800015c <__adddf3>
 8004ff2:	45aa      	cmp	sl, r5
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	460f      	mov	r7, r1
 8004ff8:	d016      	beq.n	8005028 <__ieee754_rem_pio2+0xe0>
 8004ffa:	a38d      	add	r3, pc, #564	; (adr r3, 8005230 <__ieee754_rem_pio2+0x2e8>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb f8ac 	bl	800015c <__adddf3>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4630      	mov	r0, r6
 800500a:	e9c4 2300 	strd	r2, r3, [r4]
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb f8a2 	bl	8000158 <__aeabi_dsub>
 8005014:	a386      	add	r3, pc, #536	; (adr r3, 8005230 <__ieee754_rem_pio2+0x2e8>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f7fb f89f 	bl	800015c <__adddf3>
 800501e:	f04f 35ff 	mov.w	r5, #4294967295
 8005022:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005026:	e7c6      	b.n	8004fb6 <__ieee754_rem_pio2+0x6e>
 8005028:	a383      	add	r3, pc, #524	; (adr r3, 8005238 <__ieee754_rem_pio2+0x2f0>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb f895 	bl	800015c <__adddf3>
 8005032:	a383      	add	r3, pc, #524	; (adr r3, 8005240 <__ieee754_rem_pio2+0x2f8>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	4606      	mov	r6, r0
 800503a:	460f      	mov	r7, r1
 800503c:	f7fb f88e 	bl	800015c <__adddf3>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4630      	mov	r0, r6
 8005046:	e9c4 2300 	strd	r2, r3, [r4]
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb f884 	bl	8000158 <__aeabi_dsub>
 8005050:	a37b      	add	r3, pc, #492	; (adr r3, 8005240 <__ieee754_rem_pio2+0x2f8>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	e7e0      	b.n	800501a <__ieee754_rem_pio2+0xd2>
 8005058:	4a84      	ldr	r2, [pc, #528]	; (800526c <__ieee754_rem_pio2+0x324>)
 800505a:	4592      	cmp	sl, r2
 800505c:	f300 80d5 	bgt.w	800520a <__ieee754_rem_pio2+0x2c2>
 8005060:	f001 f85c 	bl	800611c <fabs>
 8005064:	a378      	add	r3, pc, #480	; (adr r3, 8005248 <__ieee754_rem_pio2+0x300>)
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	4606      	mov	r6, r0
 800506c:	460f      	mov	r7, r1
 800506e:	f7fb fa2b 	bl	80004c8 <__aeabi_dmul>
 8005072:	2200      	movs	r2, #0
 8005074:	4b7e      	ldr	r3, [pc, #504]	; (8005270 <__ieee754_rem_pio2+0x328>)
 8005076:	f7fb f871 	bl	800015c <__adddf3>
 800507a:	f7fb fcd5 	bl	8000a28 <__aeabi_d2iz>
 800507e:	4605      	mov	r5, r0
 8005080:	f7fb f9b8 	bl	80003f4 <__aeabi_i2d>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800508c:	a366      	add	r3, pc, #408	; (adr r3, 8005228 <__ieee754_rem_pio2+0x2e0>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fb fa19 	bl	80004c8 <__aeabi_dmul>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4630      	mov	r0, r6
 800509c:	4639      	mov	r1, r7
 800509e:	f7fb f85b 	bl	8000158 <__aeabi_dsub>
 80050a2:	a363      	add	r3, pc, #396	; (adr r3, 8005230 <__ieee754_rem_pio2+0x2e8>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	4680      	mov	r8, r0
 80050aa:	4689      	mov	r9, r1
 80050ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b0:	f7fb fa0a 	bl	80004c8 <__aeabi_dmul>
 80050b4:	2d1f      	cmp	r5, #31
 80050b6:	4606      	mov	r6, r0
 80050b8:	460f      	mov	r7, r1
 80050ba:	dc0e      	bgt.n	80050da <__ieee754_rem_pio2+0x192>
 80050bc:	4b6d      	ldr	r3, [pc, #436]	; (8005274 <__ieee754_rem_pio2+0x32c>)
 80050be:	1e6a      	subs	r2, r5, #1
 80050c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c4:	4553      	cmp	r3, sl
 80050c6:	d008      	beq.n	80050da <__ieee754_rem_pio2+0x192>
 80050c8:	4632      	mov	r2, r6
 80050ca:	463b      	mov	r3, r7
 80050cc:	4640      	mov	r0, r8
 80050ce:	4649      	mov	r1, r9
 80050d0:	f7fb f842 	bl	8000158 <__aeabi_dsub>
 80050d4:	e9c4 0100 	strd	r0, r1, [r4]
 80050d8:	e013      	b.n	8005102 <__ieee754_rem_pio2+0x1ba>
 80050da:	463b      	mov	r3, r7
 80050dc:	4632      	mov	r2, r6
 80050de:	4640      	mov	r0, r8
 80050e0:	4649      	mov	r1, r9
 80050e2:	f7fb f839 	bl	8000158 <__aeabi_dsub>
 80050e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80050ea:	9305      	str	r3, [sp, #20]
 80050ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80050f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80050f4:	f1ba 0f10 	cmp.w	sl, #16
 80050f8:	dc1f      	bgt.n	800513a <__ieee754_rem_pio2+0x1f2>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	e9c4 2300 	strd	r2, r3, [r4]
 8005102:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005106:	4640      	mov	r0, r8
 8005108:	4653      	mov	r3, sl
 800510a:	4649      	mov	r1, r9
 800510c:	f7fb f824 	bl	8000158 <__aeabi_dsub>
 8005110:	4632      	mov	r2, r6
 8005112:	463b      	mov	r3, r7
 8005114:	f7fb f820 	bl	8000158 <__aeabi_dsub>
 8005118:	460b      	mov	r3, r1
 800511a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800511e:	9904      	ldr	r1, [sp, #16]
 8005120:	4602      	mov	r2, r0
 8005122:	2900      	cmp	r1, #0
 8005124:	f6bf af47 	bge.w	8004fb6 <__ieee754_rem_pio2+0x6e>
 8005128:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800512c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005130:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005134:	60e3      	str	r3, [r4, #12]
 8005136:	426d      	negs	r5, r5
 8005138:	e73d      	b.n	8004fb6 <__ieee754_rem_pio2+0x6e>
 800513a:	a33f      	add	r3, pc, #252	; (adr r3, 8005238 <__ieee754_rem_pio2+0x2f0>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005144:	f7fb f9c0 	bl	80004c8 <__aeabi_dmul>
 8005148:	4606      	mov	r6, r0
 800514a:	460f      	mov	r7, r1
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb f800 	bl	8000158 <__aeabi_dsub>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4682      	mov	sl, r0
 800515e:	468b      	mov	fp, r1
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fa fff8 	bl	8000158 <__aeabi_dsub>
 8005168:	4632      	mov	r2, r6
 800516a:	463b      	mov	r3, r7
 800516c:	f7fa fff4 	bl	8000158 <__aeabi_dsub>
 8005170:	a333      	add	r3, pc, #204	; (adr r3, 8005240 <__ieee754_rem_pio2+0x2f8>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	4606      	mov	r6, r0
 8005178:	460f      	mov	r7, r1
 800517a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800517e:	f7fb f9a3 	bl	80004c8 <__aeabi_dmul>
 8005182:	4632      	mov	r2, r6
 8005184:	463b      	mov	r3, r7
 8005186:	f7fa ffe7 	bl	8000158 <__aeabi_dsub>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4606      	mov	r6, r0
 8005190:	460f      	mov	r7, r1
 8005192:	4650      	mov	r0, sl
 8005194:	4659      	mov	r1, fp
 8005196:	f7fa ffdf 	bl	8000158 <__aeabi_dsub>
 800519a:	9a05      	ldr	r2, [sp, #20]
 800519c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b31      	cmp	r3, #49	; 0x31
 80051a4:	dc06      	bgt.n	80051b4 <__ieee754_rem_pio2+0x26c>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	46d0      	mov	r8, sl
 80051ac:	46d9      	mov	r9, fp
 80051ae:	e9c4 2300 	strd	r2, r3, [r4]
 80051b2:	e7a6      	b.n	8005102 <__ieee754_rem_pio2+0x1ba>
 80051b4:	a326      	add	r3, pc, #152	; (adr r3, 8005250 <__ieee754_rem_pio2+0x308>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051be:	f7fb f983 	bl	80004c8 <__aeabi_dmul>
 80051c2:	4606      	mov	r6, r0
 80051c4:	460f      	mov	r7, r1
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4650      	mov	r0, sl
 80051cc:	4659      	mov	r1, fp
 80051ce:	f7fa ffc3 	bl	8000158 <__aeabi_dsub>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4680      	mov	r8, r0
 80051d8:	4689      	mov	r9, r1
 80051da:	4650      	mov	r0, sl
 80051dc:	4659      	mov	r1, fp
 80051de:	f7fa ffbb 	bl	8000158 <__aeabi_dsub>
 80051e2:	4632      	mov	r2, r6
 80051e4:	463b      	mov	r3, r7
 80051e6:	f7fa ffb7 	bl	8000158 <__aeabi_dsub>
 80051ea:	a31b      	add	r3, pc, #108	; (adr r3, 8005258 <__ieee754_rem_pio2+0x310>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	4606      	mov	r6, r0
 80051f2:	460f      	mov	r7, r1
 80051f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f8:	f7fb f966 	bl	80004c8 <__aeabi_dmul>
 80051fc:	4632      	mov	r2, r6
 80051fe:	463b      	mov	r3, r7
 8005200:	f7fa ffaa 	bl	8000158 <__aeabi_dsub>
 8005204:	4606      	mov	r6, r0
 8005206:	460f      	mov	r7, r1
 8005208:	e75e      	b.n	80050c8 <__ieee754_rem_pio2+0x180>
 800520a:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <__ieee754_rem_pio2+0x330>)
 800520c:	4592      	cmp	sl, r2
 800520e:	dd35      	ble.n	800527c <__ieee754_rem_pio2+0x334>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	f7fa ffa0 	bl	8000158 <__aeabi_dsub>
 8005218:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800521c:	e9c4 0100 	strd	r0, r1, [r4]
 8005220:	e6a2      	b.n	8004f68 <__ieee754_rem_pio2+0x20>
 8005222:	bf00      	nop
 8005224:	f3af 8000 	nop.w
 8005228:	54400000 	.word	0x54400000
 800522c:	3ff921fb 	.word	0x3ff921fb
 8005230:	1a626331 	.word	0x1a626331
 8005234:	3dd0b461 	.word	0x3dd0b461
 8005238:	1a600000 	.word	0x1a600000
 800523c:	3dd0b461 	.word	0x3dd0b461
 8005240:	2e037073 	.word	0x2e037073
 8005244:	3ba3198a 	.word	0x3ba3198a
 8005248:	6dc9c883 	.word	0x6dc9c883
 800524c:	3fe45f30 	.word	0x3fe45f30
 8005250:	2e000000 	.word	0x2e000000
 8005254:	3ba3198a 	.word	0x3ba3198a
 8005258:	252049c1 	.word	0x252049c1
 800525c:	397b839a 	.word	0x397b839a
 8005260:	3fe921fb 	.word	0x3fe921fb
 8005264:	4002d97b 	.word	0x4002d97b
 8005268:	3ff921fb 	.word	0x3ff921fb
 800526c:	413921fb 	.word	0x413921fb
 8005270:	3fe00000 	.word	0x3fe00000
 8005274:	08006798 	.word	0x08006798
 8005278:	7fefffff 	.word	0x7fefffff
 800527c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005280:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005284:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005288:	460f      	mov	r7, r1
 800528a:	4606      	mov	r6, r0
 800528c:	f7fb fbcc 	bl	8000a28 <__aeabi_d2iz>
 8005290:	f7fb f8b0 	bl	80003f4 <__aeabi_i2d>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4630      	mov	r0, r6
 800529a:	4639      	mov	r1, r7
 800529c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80052a0:	f7fa ff5a 	bl	8000158 <__aeabi_dsub>
 80052a4:	2200      	movs	r2, #0
 80052a6:	4b22      	ldr	r3, [pc, #136]	; (8005330 <__ieee754_rem_pio2+0x3e8>)
 80052a8:	f7fb f90e 	bl	80004c8 <__aeabi_dmul>
 80052ac:	460f      	mov	r7, r1
 80052ae:	4606      	mov	r6, r0
 80052b0:	f7fb fbba 	bl	8000a28 <__aeabi_d2iz>
 80052b4:	f7fb f89e 	bl	80003f4 <__aeabi_i2d>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052c4:	f7fa ff48 	bl	8000158 <__aeabi_dsub>
 80052c8:	2200      	movs	r2, #0
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <__ieee754_rem_pio2+0x3e8>)
 80052cc:	f7fb f8fc 	bl	80004c8 <__aeabi_dmul>
 80052d0:	f04f 0803 	mov.w	r8, #3
 80052d4:	2600      	movs	r6, #0
 80052d6:	2700      	movs	r7, #0
 80052d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80052e0:	4632      	mov	r2, r6
 80052e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80052e6:	463b      	mov	r3, r7
 80052e8:	46c2      	mov	sl, r8
 80052ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80052ee:	f7fb fb53 	bl	8000998 <__aeabi_dcmpeq>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d1f4      	bne.n	80052e0 <__ieee754_rem_pio2+0x398>
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <__ieee754_rem_pio2+0x3ec>)
 80052f8:	462a      	mov	r2, r5
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	2302      	movs	r3, #2
 80052fe:	4621      	mov	r1, r4
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	a806      	add	r0, sp, #24
 8005304:	4653      	mov	r3, sl
 8005306:	f000 f985 	bl	8005614 <__kernel_rem_pio2>
 800530a:	9b04      	ldr	r3, [sp, #16]
 800530c:	4605      	mov	r5, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	f6bf ae51 	bge.w	8004fb6 <__ieee754_rem_pio2+0x6e>
 8005314:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800531c:	e9c4 2300 	strd	r2, r3, [r4]
 8005320:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005328:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800532c:	e703      	b.n	8005136 <__ieee754_rem_pio2+0x1ee>
 800532e:	bf00      	nop
 8005330:	41700000 	.word	0x41700000
 8005334:	08006818 	.word	0x08006818

08005338 <__ieee754_sqrt>:
 8005338:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005494 <__ieee754_sqrt+0x15c>
 800533c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005340:	ea3c 0c01 	bics.w	ip, ip, r1
 8005344:	4606      	mov	r6, r0
 8005346:	460d      	mov	r5, r1
 8005348:	460c      	mov	r4, r1
 800534a:	460a      	mov	r2, r1
 800534c:	4607      	mov	r7, r0
 800534e:	4603      	mov	r3, r0
 8005350:	d10f      	bne.n	8005372 <__ieee754_sqrt+0x3a>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	f7fb f8b7 	bl	80004c8 <__aeabi_dmul>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4630      	mov	r0, r6
 8005360:	4629      	mov	r1, r5
 8005362:	f7fa fefb 	bl	800015c <__adddf3>
 8005366:	4606      	mov	r6, r0
 8005368:	460d      	mov	r5, r1
 800536a:	4630      	mov	r0, r6
 800536c:	4629      	mov	r1, r5
 800536e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005372:	2900      	cmp	r1, #0
 8005374:	dc0e      	bgt.n	8005394 <__ieee754_sqrt+0x5c>
 8005376:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800537a:	ea5c 0707 	orrs.w	r7, ip, r7
 800537e:	d0f4      	beq.n	800536a <__ieee754_sqrt+0x32>
 8005380:	b141      	cbz	r1, 8005394 <__ieee754_sqrt+0x5c>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	f7fa fee7 	bl	8000158 <__aeabi_dsub>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	f7fb f9c5 	bl	800071c <__aeabi_ddiv>
 8005392:	e7e8      	b.n	8005366 <__ieee754_sqrt+0x2e>
 8005394:	1521      	asrs	r1, r4, #20
 8005396:	d075      	beq.n	8005484 <__ieee754_sqrt+0x14c>
 8005398:	07cc      	lsls	r4, r1, #31
 800539a:	f04f 0400 	mov.w	r4, #0
 800539e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80053a2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80053a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053aa:	bf5e      	ittt	pl
 80053ac:	0fd9      	lsrpl	r1, r3, #31
 80053ae:	005b      	lslpl	r3, r3, #1
 80053b0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80053b4:	0fd9      	lsrs	r1, r3, #31
 80053b6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80053ba:	2516      	movs	r5, #22
 80053bc:	4620      	mov	r0, r4
 80053be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053c2:	107f      	asrs	r7, r7, #1
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	1846      	adds	r6, r0, r1
 80053c8:	4296      	cmp	r6, r2
 80053ca:	bfde      	ittt	le
 80053cc:	1b92      	suble	r2, r2, r6
 80053ce:	1870      	addle	r0, r6, r1
 80053d0:	1864      	addle	r4, r4, r1
 80053d2:	0052      	lsls	r2, r2, #1
 80053d4:	3d01      	subs	r5, #1
 80053d6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80053da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80053de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053e2:	d1f0      	bne.n	80053c6 <__ieee754_sqrt+0x8e>
 80053e4:	4629      	mov	r1, r5
 80053e6:	f04f 0e20 	mov.w	lr, #32
 80053ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80053ee:	4282      	cmp	r2, r0
 80053f0:	eb06 0c05 	add.w	ip, r6, r5
 80053f4:	dc02      	bgt.n	80053fc <__ieee754_sqrt+0xc4>
 80053f6:	d113      	bne.n	8005420 <__ieee754_sqrt+0xe8>
 80053f8:	459c      	cmp	ip, r3
 80053fa:	d811      	bhi.n	8005420 <__ieee754_sqrt+0xe8>
 80053fc:	f1bc 0f00 	cmp.w	ip, #0
 8005400:	eb0c 0506 	add.w	r5, ip, r6
 8005404:	da43      	bge.n	800548e <__ieee754_sqrt+0x156>
 8005406:	2d00      	cmp	r5, #0
 8005408:	db41      	blt.n	800548e <__ieee754_sqrt+0x156>
 800540a:	f100 0801 	add.w	r8, r0, #1
 800540e:	1a12      	subs	r2, r2, r0
 8005410:	4640      	mov	r0, r8
 8005412:	459c      	cmp	ip, r3
 8005414:	bf88      	it	hi
 8005416:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800541a:	eba3 030c 	sub.w	r3, r3, ip
 800541e:	4431      	add	r1, r6
 8005420:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005424:	f1be 0e01 	subs.w	lr, lr, #1
 8005428:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800542c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005430:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005434:	d1db      	bne.n	80053ee <__ieee754_sqrt+0xb6>
 8005436:	4313      	orrs	r3, r2
 8005438:	d006      	beq.n	8005448 <__ieee754_sqrt+0x110>
 800543a:	1c48      	adds	r0, r1, #1
 800543c:	bf0b      	itete	eq
 800543e:	4671      	moveq	r1, lr
 8005440:	3101      	addne	r1, #1
 8005442:	3401      	addeq	r4, #1
 8005444:	f021 0101 	bicne.w	r1, r1, #1
 8005448:	1063      	asrs	r3, r4, #1
 800544a:	0849      	lsrs	r1, r1, #1
 800544c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005450:	07e2      	lsls	r2, r4, #31
 8005452:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005456:	bf48      	it	mi
 8005458:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800545c:	460e      	mov	r6, r1
 800545e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005462:	e782      	b.n	800536a <__ieee754_sqrt+0x32>
 8005464:	0ada      	lsrs	r2, r3, #11
 8005466:	3815      	subs	r0, #21
 8005468:	055b      	lsls	r3, r3, #21
 800546a:	2a00      	cmp	r2, #0
 800546c:	d0fa      	beq.n	8005464 <__ieee754_sqrt+0x12c>
 800546e:	02d5      	lsls	r5, r2, #11
 8005470:	d50a      	bpl.n	8005488 <__ieee754_sqrt+0x150>
 8005472:	f1c1 0420 	rsb	r4, r1, #32
 8005476:	fa23 f404 	lsr.w	r4, r3, r4
 800547a:	1e4d      	subs	r5, r1, #1
 800547c:	408b      	lsls	r3, r1
 800547e:	4322      	orrs	r2, r4
 8005480:	1b41      	subs	r1, r0, r5
 8005482:	e789      	b.n	8005398 <__ieee754_sqrt+0x60>
 8005484:	4608      	mov	r0, r1
 8005486:	e7f0      	b.n	800546a <__ieee754_sqrt+0x132>
 8005488:	0052      	lsls	r2, r2, #1
 800548a:	3101      	adds	r1, #1
 800548c:	e7ef      	b.n	800546e <__ieee754_sqrt+0x136>
 800548e:	4680      	mov	r8, r0
 8005490:	e7bd      	b.n	800540e <__ieee754_sqrt+0xd6>
 8005492:	bf00      	nop
 8005494:	7ff00000 	.word	0x7ff00000

08005498 <__kernel_cos>:
 8005498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80054a0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80054a4:	4680      	mov	r8, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	e9cd 2300 	strd	r2, r3, [sp]
 80054ac:	da04      	bge.n	80054b8 <__kernel_cos+0x20>
 80054ae:	f7fb fabb 	bl	8000a28 <__aeabi_d2iz>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f000 8086 	beq.w	80055c4 <__kernel_cos+0x12c>
 80054b8:	4642      	mov	r2, r8
 80054ba:	463b      	mov	r3, r7
 80054bc:	4640      	mov	r0, r8
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb f802 	bl	80004c8 <__aeabi_dmul>
 80054c4:	2200      	movs	r2, #0
 80054c6:	4b4e      	ldr	r3, [pc, #312]	; (8005600 <__kernel_cos+0x168>)
 80054c8:	4604      	mov	r4, r0
 80054ca:	460d      	mov	r5, r1
 80054cc:	f7fa fffc 	bl	80004c8 <__aeabi_dmul>
 80054d0:	a33f      	add	r3, pc, #252	; (adr r3, 80055d0 <__kernel_cos+0x138>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	4682      	mov	sl, r0
 80054d8:	468b      	mov	fp, r1
 80054da:	4620      	mov	r0, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	f7fa fff3 	bl	80004c8 <__aeabi_dmul>
 80054e2:	a33d      	add	r3, pc, #244	; (adr r3, 80055d8 <__kernel_cos+0x140>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fa fe38 	bl	800015c <__adddf3>
 80054ec:	4622      	mov	r2, r4
 80054ee:	462b      	mov	r3, r5
 80054f0:	f7fa ffea 	bl	80004c8 <__aeabi_dmul>
 80054f4:	a33a      	add	r3, pc, #232	; (adr r3, 80055e0 <__kernel_cos+0x148>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fa fe2d 	bl	8000158 <__aeabi_dsub>
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	f7fa ffe1 	bl	80004c8 <__aeabi_dmul>
 8005506:	a338      	add	r3, pc, #224	; (adr r3, 80055e8 <__kernel_cos+0x150>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f7fa fe26 	bl	800015c <__adddf3>
 8005510:	4622      	mov	r2, r4
 8005512:	462b      	mov	r3, r5
 8005514:	f7fa ffd8 	bl	80004c8 <__aeabi_dmul>
 8005518:	a335      	add	r3, pc, #212	; (adr r3, 80055f0 <__kernel_cos+0x158>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fa fe1b 	bl	8000158 <__aeabi_dsub>
 8005522:	4622      	mov	r2, r4
 8005524:	462b      	mov	r3, r5
 8005526:	f7fa ffcf 	bl	80004c8 <__aeabi_dmul>
 800552a:	a333      	add	r3, pc, #204	; (adr r3, 80055f8 <__kernel_cos+0x160>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f7fa fe14 	bl	800015c <__adddf3>
 8005534:	4622      	mov	r2, r4
 8005536:	462b      	mov	r3, r5
 8005538:	f7fa ffc6 	bl	80004c8 <__aeabi_dmul>
 800553c:	4622      	mov	r2, r4
 800553e:	462b      	mov	r3, r5
 8005540:	f7fa ffc2 	bl	80004c8 <__aeabi_dmul>
 8005544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
 800554c:	4640      	mov	r0, r8
 800554e:	4639      	mov	r1, r7
 8005550:	f7fa ffba 	bl	80004c8 <__aeabi_dmul>
 8005554:	460b      	mov	r3, r1
 8005556:	4602      	mov	r2, r0
 8005558:	4629      	mov	r1, r5
 800555a:	4620      	mov	r0, r4
 800555c:	f7fa fdfc 	bl	8000158 <__aeabi_dsub>
 8005560:	4b28      	ldr	r3, [pc, #160]	; (8005604 <__kernel_cos+0x16c>)
 8005562:	4680      	mov	r8, r0
 8005564:	429e      	cmp	r6, r3
 8005566:	4689      	mov	r9, r1
 8005568:	dc0e      	bgt.n	8005588 <__kernel_cos+0xf0>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4650      	mov	r0, sl
 8005570:	4659      	mov	r1, fp
 8005572:	f7fa fdf1 	bl	8000158 <__aeabi_dsub>
 8005576:	4602      	mov	r2, r0
 8005578:	2000      	movs	r0, #0
 800557a:	460b      	mov	r3, r1
 800557c:	4922      	ldr	r1, [pc, #136]	; (8005608 <__kernel_cos+0x170>)
 800557e:	f7fa fdeb 	bl	8000158 <__aeabi_dsub>
 8005582:	b003      	add	sp, #12
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	2400      	movs	r4, #0
 800558a:	4b20      	ldr	r3, [pc, #128]	; (800560c <__kernel_cos+0x174>)
 800558c:	4622      	mov	r2, r4
 800558e:	429e      	cmp	r6, r3
 8005590:	bfcc      	ite	gt
 8005592:	4d1f      	ldrgt	r5, [pc, #124]	; (8005610 <__kernel_cos+0x178>)
 8005594:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005598:	462b      	mov	r3, r5
 800559a:	2000      	movs	r0, #0
 800559c:	491a      	ldr	r1, [pc, #104]	; (8005608 <__kernel_cos+0x170>)
 800559e:	f7fa fddb 	bl	8000158 <__aeabi_dsub>
 80055a2:	4622      	mov	r2, r4
 80055a4:	4606      	mov	r6, r0
 80055a6:	460f      	mov	r7, r1
 80055a8:	462b      	mov	r3, r5
 80055aa:	4650      	mov	r0, sl
 80055ac:	4659      	mov	r1, fp
 80055ae:	f7fa fdd3 	bl	8000158 <__aeabi_dsub>
 80055b2:	4642      	mov	r2, r8
 80055b4:	464b      	mov	r3, r9
 80055b6:	f7fa fdcf 	bl	8000158 <__aeabi_dsub>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	e7dc      	b.n	800557e <__kernel_cos+0xe6>
 80055c4:	2000      	movs	r0, #0
 80055c6:	4910      	ldr	r1, [pc, #64]	; (8005608 <__kernel_cos+0x170>)
 80055c8:	e7db      	b.n	8005582 <__kernel_cos+0xea>
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
 80055d0:	be8838d4 	.word	0xbe8838d4
 80055d4:	bda8fae9 	.word	0xbda8fae9
 80055d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80055dc:	3e21ee9e 	.word	0x3e21ee9e
 80055e0:	809c52ad 	.word	0x809c52ad
 80055e4:	3e927e4f 	.word	0x3e927e4f
 80055e8:	19cb1590 	.word	0x19cb1590
 80055ec:	3efa01a0 	.word	0x3efa01a0
 80055f0:	16c15177 	.word	0x16c15177
 80055f4:	3f56c16c 	.word	0x3f56c16c
 80055f8:	5555554c 	.word	0x5555554c
 80055fc:	3fa55555 	.word	0x3fa55555
 8005600:	3fe00000 	.word	0x3fe00000
 8005604:	3fd33332 	.word	0x3fd33332
 8005608:	3ff00000 	.word	0x3ff00000
 800560c:	3fe90000 	.word	0x3fe90000
 8005610:	3fd20000 	.word	0x3fd20000

08005614 <__kernel_rem_pio2>:
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800561c:	9308      	str	r3, [sp, #32]
 800561e:	9106      	str	r1, [sp, #24]
 8005620:	4bb6      	ldr	r3, [pc, #728]	; (80058fc <__kernel_rem_pio2+0x2e8>)
 8005622:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005624:	f112 0f14 	cmn.w	r2, #20
 8005628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800562c:	bfa8      	it	ge
 800562e:	1ed4      	subge	r4, r2, #3
 8005630:	9302      	str	r3, [sp, #8]
 8005632:	9b08      	ldr	r3, [sp, #32]
 8005634:	bfb8      	it	lt
 8005636:	2400      	movlt	r4, #0
 8005638:	f103 33ff 	add.w	r3, r3, #4294967295
 800563c:	9307      	str	r3, [sp, #28]
 800563e:	bfa4      	itt	ge
 8005640:	2318      	movge	r3, #24
 8005642:	fb94 f4f3 	sdivge	r4, r4, r3
 8005646:	f06f 0317 	mvn.w	r3, #23
 800564a:	fb04 3303 	mla	r3, r4, r3, r3
 800564e:	eb03 0b02 	add.w	fp, r3, r2
 8005652:	9a07      	ldr	r2, [sp, #28]
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	1aa7      	subs	r7, r4, r2
 8005658:	eb03 0802 	add.w	r8, r3, r2
 800565c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800565e:	2500      	movs	r5, #0
 8005660:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005664:	2200      	movs	r2, #0
 8005666:	2300      	movs	r3, #0
 8005668:	9009      	str	r0, [sp, #36]	; 0x24
 800566a:	ae20      	add	r6, sp, #128	; 0x80
 800566c:	4545      	cmp	r5, r8
 800566e:	dd14      	ble.n	800569a <__kernel_rem_pio2+0x86>
 8005670:	f04f 0800 	mov.w	r8, #0
 8005674:	9a08      	ldr	r2, [sp, #32]
 8005676:	ab20      	add	r3, sp, #128	; 0x80
 8005678:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800567c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8005680:	9b02      	ldr	r3, [sp, #8]
 8005682:	4598      	cmp	r8, r3
 8005684:	dc35      	bgt.n	80056f2 <__kernel_rem_pio2+0xde>
 8005686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005688:	2200      	movs	r2, #0
 800568a:	f1a3 0908 	sub.w	r9, r3, #8
 800568e:	2300      	movs	r3, #0
 8005690:	462f      	mov	r7, r5
 8005692:	2600      	movs	r6, #0
 8005694:	e9cd 2300 	strd	r2, r3, [sp]
 8005698:	e01f      	b.n	80056da <__kernel_rem_pio2+0xc6>
 800569a:	42ef      	cmn	r7, r5
 800569c:	d40b      	bmi.n	80056b6 <__kernel_rem_pio2+0xa2>
 800569e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80056a2:	e9cd 2300 	strd	r2, r3, [sp]
 80056a6:	f7fa fea5 	bl	80003f4 <__aeabi_i2d>
 80056aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ae:	e8e6 0102 	strd	r0, r1, [r6], #8
 80056b2:	3501      	adds	r5, #1
 80056b4:	e7da      	b.n	800566c <__kernel_rem_pio2+0x58>
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	e7f8      	b.n	80056ae <__kernel_rem_pio2+0x9a>
 80056bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80056c4:	f7fa ff00 	bl	80004c8 <__aeabi_dmul>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056d0:	f7fa fd44 	bl	800015c <__adddf3>
 80056d4:	e9cd 0100 	strd	r0, r1, [sp]
 80056d8:	3601      	adds	r6, #1
 80056da:	9b07      	ldr	r3, [sp, #28]
 80056dc:	3f08      	subs	r7, #8
 80056de:	429e      	cmp	r6, r3
 80056e0:	ddec      	ble.n	80056bc <__kernel_rem_pio2+0xa8>
 80056e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056e6:	f108 0801 	add.w	r8, r8, #1
 80056ea:	e8ea 2302 	strd	r2, r3, [sl], #8
 80056ee:	3508      	adds	r5, #8
 80056f0:	e7c6      	b.n	8005680 <__kernel_rem_pio2+0x6c>
 80056f2:	9b02      	ldr	r3, [sp, #8]
 80056f4:	aa0c      	add	r2, sp, #48	; 0x30
 80056f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80056fc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80056fe:	9e02      	ldr	r6, [sp, #8]
 8005700:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005704:	930a      	str	r3, [sp, #40]	; 0x28
 8005706:	ab98      	add	r3, sp, #608	; 0x260
 8005708:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800570c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005710:	ab70      	add	r3, sp, #448	; 0x1c0
 8005712:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8005716:	46d0      	mov	r8, sl
 8005718:	46b1      	mov	r9, r6
 800571a:	af0c      	add	r7, sp, #48	; 0x30
 800571c:	9700      	str	r7, [sp, #0]
 800571e:	f1b9 0f00 	cmp.w	r9, #0
 8005722:	f1a8 0808 	sub.w	r8, r8, #8
 8005726:	dc71      	bgt.n	800580c <__kernel_rem_pio2+0x1f8>
 8005728:	465a      	mov	r2, fp
 800572a:	4620      	mov	r0, r4
 800572c:	4629      	mov	r1, r5
 800572e:	f000 fd83 	bl	8006238 <scalbn>
 8005732:	2200      	movs	r2, #0
 8005734:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005738:	4604      	mov	r4, r0
 800573a:	460d      	mov	r5, r1
 800573c:	f7fa fec4 	bl	80004c8 <__aeabi_dmul>
 8005740:	f000 fcf2 	bl	8006128 <floor>
 8005744:	2200      	movs	r2, #0
 8005746:	4b6e      	ldr	r3, [pc, #440]	; (8005900 <__kernel_rem_pio2+0x2ec>)
 8005748:	f7fa febe 	bl	80004c8 <__aeabi_dmul>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4620      	mov	r0, r4
 8005752:	4629      	mov	r1, r5
 8005754:	f7fa fd00 	bl	8000158 <__aeabi_dsub>
 8005758:	460d      	mov	r5, r1
 800575a:	4604      	mov	r4, r0
 800575c:	f7fb f964 	bl	8000a28 <__aeabi_d2iz>
 8005760:	9004      	str	r0, [sp, #16]
 8005762:	f7fa fe47 	bl	80003f4 <__aeabi_i2d>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4620      	mov	r0, r4
 800576c:	4629      	mov	r1, r5
 800576e:	f7fa fcf3 	bl	8000158 <__aeabi_dsub>
 8005772:	f1bb 0f00 	cmp.w	fp, #0
 8005776:	4680      	mov	r8, r0
 8005778:	4689      	mov	r9, r1
 800577a:	dd70      	ble.n	800585e <__kernel_rem_pio2+0x24a>
 800577c:	1e72      	subs	r2, r6, #1
 800577e:	ab0c      	add	r3, sp, #48	; 0x30
 8005780:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005784:	9c04      	ldr	r4, [sp, #16]
 8005786:	f1cb 0118 	rsb	r1, fp, #24
 800578a:	fa40 f301 	asr.w	r3, r0, r1
 800578e:	441c      	add	r4, r3
 8005790:	408b      	lsls	r3, r1
 8005792:	1ac0      	subs	r0, r0, r3
 8005794:	ab0c      	add	r3, sp, #48	; 0x30
 8005796:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800579a:	f1cb 0317 	rsb	r3, fp, #23
 800579e:	9404      	str	r4, [sp, #16]
 80057a0:	fa40 f303 	asr.w	r3, r0, r3
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	9b00      	ldr	r3, [sp, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dd66      	ble.n	800587a <__kernel_rem_pio2+0x266>
 80057ac:	2200      	movs	r2, #0
 80057ae:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80057b2:	4614      	mov	r4, r2
 80057b4:	9b04      	ldr	r3, [sp, #16]
 80057b6:	3301      	adds	r3, #1
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	4296      	cmp	r6, r2
 80057bc:	f300 80ac 	bgt.w	8005918 <__kernel_rem_pio2+0x304>
 80057c0:	f1bb 0f00 	cmp.w	fp, #0
 80057c4:	dd07      	ble.n	80057d6 <__kernel_rem_pio2+0x1c2>
 80057c6:	f1bb 0f01 	cmp.w	fp, #1
 80057ca:	f000 80b4 	beq.w	8005936 <__kernel_rem_pio2+0x322>
 80057ce:	f1bb 0f02 	cmp.w	fp, #2
 80057d2:	f000 80ba 	beq.w	800594a <__kernel_rem_pio2+0x336>
 80057d6:	9b00      	ldr	r3, [sp, #0]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d14e      	bne.n	800587a <__kernel_rem_pio2+0x266>
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	2000      	movs	r0, #0
 80057e2:	4948      	ldr	r1, [pc, #288]	; (8005904 <__kernel_rem_pio2+0x2f0>)
 80057e4:	f7fa fcb8 	bl	8000158 <__aeabi_dsub>
 80057e8:	4680      	mov	r8, r0
 80057ea:	4689      	mov	r9, r1
 80057ec:	2c00      	cmp	r4, #0
 80057ee:	d044      	beq.n	800587a <__kernel_rem_pio2+0x266>
 80057f0:	465a      	mov	r2, fp
 80057f2:	2000      	movs	r0, #0
 80057f4:	4943      	ldr	r1, [pc, #268]	; (8005904 <__kernel_rem_pio2+0x2f0>)
 80057f6:	f000 fd1f 	bl	8006238 <scalbn>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fa fca9 	bl	8000158 <__aeabi_dsub>
 8005806:	4680      	mov	r8, r0
 8005808:	4689      	mov	r9, r1
 800580a:	e036      	b.n	800587a <__kernel_rem_pio2+0x266>
 800580c:	2200      	movs	r2, #0
 800580e:	4b3e      	ldr	r3, [pc, #248]	; (8005908 <__kernel_rem_pio2+0x2f4>)
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f7fa fe58 	bl	80004c8 <__aeabi_dmul>
 8005818:	f7fb f906 	bl	8000a28 <__aeabi_d2iz>
 800581c:	f7fa fdea 	bl	80003f4 <__aeabi_i2d>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005828:	2200      	movs	r2, #0
 800582a:	4b38      	ldr	r3, [pc, #224]	; (800590c <__kernel_rem_pio2+0x2f8>)
 800582c:	f7fa fe4c 	bl	80004c8 <__aeabi_dmul>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4620      	mov	r0, r4
 8005836:	4629      	mov	r1, r5
 8005838:	f7fa fc8e 	bl	8000158 <__aeabi_dsub>
 800583c:	f7fb f8f4 	bl	8000a28 <__aeabi_d2iz>
 8005840:	9b00      	ldr	r3, [sp, #0]
 8005842:	f109 39ff 	add.w	r9, r9, #4294967295
 8005846:	f843 0b04 	str.w	r0, [r3], #4
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005850:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005854:	f7fa fc82 	bl	800015c <__adddf3>
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	e75f      	b.n	800571e <__kernel_rem_pio2+0x10a>
 800585e:	d105      	bne.n	800586c <__kernel_rem_pio2+0x258>
 8005860:	1e73      	subs	r3, r6, #1
 8005862:	aa0c      	add	r2, sp, #48	; 0x30
 8005864:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005868:	15c3      	asrs	r3, r0, #23
 800586a:	e79b      	b.n	80057a4 <__kernel_rem_pio2+0x190>
 800586c:	2200      	movs	r2, #0
 800586e:	4b28      	ldr	r3, [pc, #160]	; (8005910 <__kernel_rem_pio2+0x2fc>)
 8005870:	f7fb f8b0 	bl	80009d4 <__aeabi_dcmpge>
 8005874:	2800      	cmp	r0, #0
 8005876:	d13e      	bne.n	80058f6 <__kernel_rem_pio2+0x2e2>
 8005878:	9000      	str	r0, [sp, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	2300      	movs	r3, #0
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fb f889 	bl	8000998 <__aeabi_dcmpeq>
 8005886:	2800      	cmp	r0, #0
 8005888:	f000 80b1 	beq.w	80059ee <__kernel_rem_pio2+0x3da>
 800588c:	1e74      	subs	r4, r6, #1
 800588e:	4623      	mov	r3, r4
 8005890:	2200      	movs	r2, #0
 8005892:	9902      	ldr	r1, [sp, #8]
 8005894:	428b      	cmp	r3, r1
 8005896:	da5f      	bge.n	8005958 <__kernel_rem_pio2+0x344>
 8005898:	2a00      	cmp	r2, #0
 800589a:	d074      	beq.n	8005986 <__kernel_rem_pio2+0x372>
 800589c:	ab0c      	add	r3, sp, #48	; 0x30
 800589e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80058a2:	f1ab 0b18 	sub.w	fp, fp, #24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 809f 	beq.w	80059ea <__kernel_rem_pio2+0x3d6>
 80058ac:	465a      	mov	r2, fp
 80058ae:	2000      	movs	r0, #0
 80058b0:	4914      	ldr	r1, [pc, #80]	; (8005904 <__kernel_rem_pio2+0x2f0>)
 80058b2:	f000 fcc1 	bl	8006238 <scalbn>
 80058b6:	46a2      	mov	sl, r4
 80058b8:	4606      	mov	r6, r0
 80058ba:	460f      	mov	r7, r1
 80058bc:	f04f 0800 	mov.w	r8, #0
 80058c0:	ab70      	add	r3, sp, #448	; 0x1c0
 80058c2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8005908 <__kernel_rem_pio2+0x2f4>
 80058c6:	00e5      	lsls	r5, r4, #3
 80058c8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80058cc:	f1ba 0f00 	cmp.w	sl, #0
 80058d0:	f280 80c3 	bge.w	8005a5a <__kernel_rem_pio2+0x446>
 80058d4:	4626      	mov	r6, r4
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	f2c0 80f5 	blt.w	8005ac6 <__kernel_rem_pio2+0x4b2>
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <__kernel_rem_pio2+0x300>)
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	9307      	str	r3, [sp, #28]
 80058e4:	ab70      	add	r3, sp, #448	; 0x1c0
 80058e6:	f04f 0b00 	mov.w	fp, #0
 80058ea:	f04f 0800 	mov.w	r8, #0
 80058ee:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80058f2:	1ba7      	subs	r7, r4, r6
 80058f4:	e0db      	b.n	8005aae <__kernel_rem_pio2+0x49a>
 80058f6:	2302      	movs	r3, #2
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	e757      	b.n	80057ac <__kernel_rem_pio2+0x198>
 80058fc:	08006960 	.word	0x08006960
 8005900:	40200000 	.word	0x40200000
 8005904:	3ff00000 	.word	0x3ff00000
 8005908:	3e700000 	.word	0x3e700000
 800590c:	41700000 	.word	0x41700000
 8005910:	3fe00000 	.word	0x3fe00000
 8005914:	08006920 	.word	0x08006920
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	b944      	cbnz	r4, 800592e <__kernel_rem_pio2+0x31a>
 800591c:	b11b      	cbz	r3, 8005926 <__kernel_rem_pio2+0x312>
 800591e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	2301      	movs	r3, #1
 8005926:	461c      	mov	r4, r3
 8005928:	3201      	adds	r2, #1
 800592a:	3704      	adds	r7, #4
 800592c:	e745      	b.n	80057ba <__kernel_rem_pio2+0x1a6>
 800592e:	1acb      	subs	r3, r1, r3
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4623      	mov	r3, r4
 8005934:	e7f7      	b.n	8005926 <__kernel_rem_pio2+0x312>
 8005936:	1e72      	subs	r2, r6, #1
 8005938:	ab0c      	add	r3, sp, #48	; 0x30
 800593a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005942:	a90c      	add	r1, sp, #48	; 0x30
 8005944:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005948:	e745      	b.n	80057d6 <__kernel_rem_pio2+0x1c2>
 800594a:	1e72      	subs	r2, r6, #1
 800594c:	ab0c      	add	r3, sp, #48	; 0x30
 800594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005952:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005956:	e7f4      	b.n	8005942 <__kernel_rem_pio2+0x32e>
 8005958:	a90c      	add	r1, sp, #48	; 0x30
 800595a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800595e:	3b01      	subs	r3, #1
 8005960:	430a      	orrs	r2, r1
 8005962:	e796      	b.n	8005892 <__kernel_rem_pio2+0x27e>
 8005964:	3401      	adds	r4, #1
 8005966:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800596a:	2a00      	cmp	r2, #0
 800596c:	d0fa      	beq.n	8005964 <__kernel_rem_pio2+0x350>
 800596e:	9b08      	ldr	r3, [sp, #32]
 8005970:	f106 0801 	add.w	r8, r6, #1
 8005974:	18f5      	adds	r5, r6, r3
 8005976:	ab20      	add	r3, sp, #128	; 0x80
 8005978:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800597c:	4434      	add	r4, r6
 800597e:	4544      	cmp	r4, r8
 8005980:	da04      	bge.n	800598c <__kernel_rem_pio2+0x378>
 8005982:	4626      	mov	r6, r4
 8005984:	e6bf      	b.n	8005706 <__kernel_rem_pio2+0xf2>
 8005986:	2401      	movs	r4, #1
 8005988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800598a:	e7ec      	b.n	8005966 <__kernel_rem_pio2+0x352>
 800598c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598e:	f04f 0900 	mov.w	r9, #0
 8005992:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005996:	f7fa fd2d 	bl	80003f4 <__aeabi_i2d>
 800599a:	2600      	movs	r6, #0
 800599c:	2700      	movs	r7, #0
 800599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a0:	e9c5 0100 	strd	r0, r1, [r5]
 80059a4:	3b08      	subs	r3, #8
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	9504      	str	r5, [sp, #16]
 80059aa:	9b07      	ldr	r3, [sp, #28]
 80059ac:	4599      	cmp	r9, r3
 80059ae:	dd05      	ble.n	80059bc <__kernel_rem_pio2+0x3a8>
 80059b0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80059b4:	f108 0801 	add.w	r8, r8, #1
 80059b8:	3508      	adds	r5, #8
 80059ba:	e7e0      	b.n	800597e <__kernel_rem_pio2+0x36a>
 80059bc:	f8dd c010 	ldr.w	ip, [sp, #16]
 80059c0:	9900      	ldr	r1, [sp, #0]
 80059c2:	f109 0901 	add.w	r9, r9, #1
 80059c6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80059ca:	9100      	str	r1, [sp, #0]
 80059cc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80059d0:	f8cd c010 	str.w	ip, [sp, #16]
 80059d4:	f7fa fd78 	bl	80004c8 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	f7fa fbbc 	bl	800015c <__adddf3>
 80059e4:	4606      	mov	r6, r0
 80059e6:	460f      	mov	r7, r1
 80059e8:	e7df      	b.n	80059aa <__kernel_rem_pio2+0x396>
 80059ea:	3c01      	subs	r4, #1
 80059ec:	e756      	b.n	800589c <__kernel_rem_pio2+0x288>
 80059ee:	f1cb 0200 	rsb	r2, fp, #0
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f000 fc1f 	bl	8006238 <scalbn>
 80059fa:	2200      	movs	r2, #0
 80059fc:	4ba4      	ldr	r3, [pc, #656]	; (8005c90 <__kernel_rem_pio2+0x67c>)
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	f7fa ffe7 	bl	80009d4 <__aeabi_dcmpge>
 8005a06:	b1f8      	cbz	r0, 8005a48 <__kernel_rem_pio2+0x434>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4ba2      	ldr	r3, [pc, #648]	; (8005c94 <__kernel_rem_pio2+0x680>)
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fa fd5a 	bl	80004c8 <__aeabi_dmul>
 8005a14:	f7fb f808 	bl	8000a28 <__aeabi_d2iz>
 8005a18:	4607      	mov	r7, r0
 8005a1a:	f7fa fceb 	bl	80003f4 <__aeabi_i2d>
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4b9b      	ldr	r3, [pc, #620]	; (8005c90 <__kernel_rem_pio2+0x67c>)
 8005a22:	f7fa fd51 	bl	80004c8 <__aeabi_dmul>
 8005a26:	460b      	mov	r3, r1
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7fa fb93 	bl	8000158 <__aeabi_dsub>
 8005a32:	f7fa fff9 	bl	8000a28 <__aeabi_d2iz>
 8005a36:	1c74      	adds	r4, r6, #1
 8005a38:	ab0c      	add	r3, sp, #48	; 0x30
 8005a3a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005a3e:	f10b 0b18 	add.w	fp, fp, #24
 8005a42:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8005a46:	e731      	b.n	80058ac <__kernel_rem_pio2+0x298>
 8005a48:	4620      	mov	r0, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	f7fa ffec 	bl	8000a28 <__aeabi_d2iz>
 8005a50:	ab0c      	add	r3, sp, #48	; 0x30
 8005a52:	4634      	mov	r4, r6
 8005a54:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005a58:	e728      	b.n	80058ac <__kernel_rem_pio2+0x298>
 8005a5a:	ab0c      	add	r3, sp, #48	; 0x30
 8005a5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005a60:	f7fa fcc8 	bl	80003f4 <__aeabi_i2d>
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	f7fa fd2e 	bl	80004c8 <__aeabi_dmul>
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8005a72:	464b      	mov	r3, r9
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa fd26 	bl	80004c8 <__aeabi_dmul>
 8005a7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a80:	4606      	mov	r6, r0
 8005a82:	460f      	mov	r7, r1
 8005a84:	e722      	b.n	80058cc <__kernel_rem_pio2+0x2b8>
 8005a86:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005a8a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005a8e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005a92:	f8cd c01c 	str.w	ip, [sp, #28]
 8005a96:	f7fa fd17 	bl	80004c8 <__aeabi_dmul>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	4659      	mov	r1, fp
 8005aa2:	f7fa fb5b 	bl	800015c <__adddf3>
 8005aa6:	4682      	mov	sl, r0
 8005aa8:	468b      	mov	fp, r1
 8005aaa:	f108 0801 	add.w	r8, r8, #1
 8005aae:	9b02      	ldr	r3, [sp, #8]
 8005ab0:	4598      	cmp	r8, r3
 8005ab2:	dc01      	bgt.n	8005ab8 <__kernel_rem_pio2+0x4a4>
 8005ab4:	45b8      	cmp	r8, r7
 8005ab6:	dde6      	ble.n	8005a86 <__kernel_rem_pio2+0x472>
 8005ab8:	ab48      	add	r3, sp, #288	; 0x120
 8005aba:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005abe:	e9c7 ab00 	strd	sl, fp, [r7]
 8005ac2:	3e01      	subs	r6, #1
 8005ac4:	e707      	b.n	80058d6 <__kernel_rem_pio2+0x2c2>
 8005ac6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	dc09      	bgt.n	8005ae0 <__kernel_rem_pio2+0x4cc>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	dc32      	bgt.n	8005b36 <__kernel_rem_pio2+0x522>
 8005ad0:	d05a      	beq.n	8005b88 <__kernel_rem_pio2+0x574>
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	f003 0007 	and.w	r0, r3, #7
 8005ad8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d1f5      	bne.n	8005ad2 <__kernel_rem_pio2+0x4be>
 8005ae6:	ab48      	add	r3, sp, #288	; 0x120
 8005ae8:	441d      	add	r5, r3
 8005aea:	46aa      	mov	sl, r5
 8005aec:	46a3      	mov	fp, r4
 8005aee:	f1bb 0f00 	cmp.w	fp, #0
 8005af2:	dc76      	bgt.n	8005be2 <__kernel_rem_pio2+0x5ce>
 8005af4:	46aa      	mov	sl, r5
 8005af6:	46a3      	mov	fp, r4
 8005af8:	f1bb 0f01 	cmp.w	fp, #1
 8005afc:	f300 8090 	bgt.w	8005c20 <__kernel_rem_pio2+0x60c>
 8005b00:	2700      	movs	r7, #0
 8005b02:	463e      	mov	r6, r7
 8005b04:	2c01      	cmp	r4, #1
 8005b06:	f300 80aa 	bgt.w	8005c5e <__kernel_rem_pio2+0x64a>
 8005b0a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8005b0e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8005b12:	9b00      	ldr	r3, [sp, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f040 80ac 	bne.w	8005c72 <__kernel_rem_pio2+0x65e>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	462a      	mov	r2, r5
 8005b1e:	9806      	ldr	r0, [sp, #24]
 8005b20:	e9c0 2300 	strd	r2, r3, [r0]
 8005b24:	4622      	mov	r2, r4
 8005b26:	460b      	mov	r3, r1
 8005b28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	4633      	mov	r3, r6
 8005b30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005b34:	e7cd      	b.n	8005ad2 <__kernel_rem_pio2+0x4be>
 8005b36:	2000      	movs	r0, #0
 8005b38:	46a0      	mov	r8, r4
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	ab48      	add	r3, sp, #288	; 0x120
 8005b3e:	441d      	add	r5, r3
 8005b40:	f1b8 0f00 	cmp.w	r8, #0
 8005b44:	da3a      	bge.n	8005bbc <__kernel_rem_pio2+0x5a8>
 8005b46:	9b00      	ldr	r3, [sp, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d03e      	beq.n	8005bca <__kernel_rem_pio2+0x5b6>
 8005b4c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005b50:	4602      	mov	r2, r0
 8005b52:	462b      	mov	r3, r5
 8005b54:	9d06      	ldr	r5, [sp, #24]
 8005b56:	2601      	movs	r6, #1
 8005b58:	e9c5 2300 	strd	r2, r3, [r5]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005b62:	f7fa faf9 	bl	8000158 <__aeabi_dsub>
 8005b66:	4684      	mov	ip, r0
 8005b68:	460f      	mov	r7, r1
 8005b6a:	ad48      	add	r5, sp, #288	; 0x120
 8005b6c:	42b4      	cmp	r4, r6
 8005b6e:	f105 0508 	add.w	r5, r5, #8
 8005b72:	da2c      	bge.n	8005bce <__kernel_rem_pio2+0x5ba>
 8005b74:	9b00      	ldr	r3, [sp, #0]
 8005b76:	b10b      	cbz	r3, 8005b7c <__kernel_rem_pio2+0x568>
 8005b78:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005b7c:	4662      	mov	r2, ip
 8005b7e:	463b      	mov	r3, r7
 8005b80:	9906      	ldr	r1, [sp, #24]
 8005b82:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005b86:	e7a4      	b.n	8005ad2 <__kernel_rem_pio2+0x4be>
 8005b88:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8005b8a:	ab48      	add	r3, sp, #288	; 0x120
 8005b8c:	4637      	mov	r7, r6
 8005b8e:	441d      	add	r5, r3
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	da09      	bge.n	8005ba8 <__kernel_rem_pio2+0x594>
 8005b94:	9b00      	ldr	r3, [sp, #0]
 8005b96:	b10b      	cbz	r3, 8005b9c <__kernel_rem_pio2+0x588>
 8005b98:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	9906      	ldr	r1, [sp, #24]
 8005ba2:	e9c1 2300 	strd	r2, r3, [r1]
 8005ba6:	e794      	b.n	8005ad2 <__kernel_rem_pio2+0x4be>
 8005ba8:	4630      	mov	r0, r6
 8005baa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f7fa fad4 	bl	800015c <__adddf3>
 8005bb4:	3c01      	subs	r4, #1
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460f      	mov	r7, r1
 8005bba:	e7e9      	b.n	8005b90 <__kernel_rem_pio2+0x57c>
 8005bbc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005bc0:	f7fa facc 	bl	800015c <__adddf3>
 8005bc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bc8:	e7ba      	b.n	8005b40 <__kernel_rem_pio2+0x52c>
 8005bca:	460d      	mov	r5, r1
 8005bcc:	e7c0      	b.n	8005b50 <__kernel_rem_pio2+0x53c>
 8005bce:	4660      	mov	r0, ip
 8005bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa fac1 	bl	800015c <__adddf3>
 8005bda:	3601      	adds	r6, #1
 8005bdc:	4684      	mov	ip, r0
 8005bde:	460f      	mov	r7, r1
 8005be0:	e7c4      	b.n	8005b6c <__kernel_rem_pio2+0x558>
 8005be2:	e9da 6700 	ldrd	r6, r7, [sl]
 8005be6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005bea:	4632      	mov	r2, r6
 8005bec:	463b      	mov	r3, r7
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fab3 	bl	800015c <__adddf3>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4649      	mov	r1, r9
 8005c02:	f7fa faa9 	bl	8000158 <__aeabi_dsub>
 8005c06:	4632      	mov	r2, r6
 8005c08:	463b      	mov	r3, r7
 8005c0a:	f7fa faa7 	bl	800015c <__adddf3>
 8005c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c12:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005c16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c1a:	e9ca 2300 	strd	r2, r3, [sl]
 8005c1e:	e766      	b.n	8005aee <__kernel_rem_pio2+0x4da>
 8005c20:	e9da 8900 	ldrd	r8, r9, [sl]
 8005c24:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005c28:	4642      	mov	r2, r8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	4639      	mov	r1, r7
 8005c30:	f7fa fa94 	bl	800015c <__adddf3>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	4639      	mov	r1, r7
 8005c40:	f7fa fa8a 	bl	8000158 <__aeabi_dsub>
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	f7fa fa88 	bl	800015c <__adddf3>
 8005c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c50:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005c54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c58:	e9ca 2300 	strd	r2, r3, [sl]
 8005c5c:	e74c      	b.n	8005af8 <__kernel_rem_pio2+0x4e4>
 8005c5e:	4638      	mov	r0, r7
 8005c60:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005c64:	4631      	mov	r1, r6
 8005c66:	f7fa fa79 	bl	800015c <__adddf3>
 8005c6a:	3c01      	subs	r4, #1
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	460e      	mov	r6, r1
 8005c70:	e748      	b.n	8005b04 <__kernel_rem_pio2+0x4f0>
 8005c72:	9b06      	ldr	r3, [sp, #24]
 8005c74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005c78:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005c7c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005c80:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005c84:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005c88:	601d      	str	r5, [r3, #0]
 8005c8a:	615e      	str	r6, [r3, #20]
 8005c8c:	e721      	b.n	8005ad2 <__kernel_rem_pio2+0x4be>
 8005c8e:	bf00      	nop
 8005c90:	41700000 	.word	0x41700000
 8005c94:	3e700000 	.word	0x3e700000

08005c98 <__kernel_sin>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8005ca2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ca6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005caa:	4682      	mov	sl, r0
 8005cac:	460c      	mov	r4, r1
 8005cae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005cb0:	da03      	bge.n	8005cba <__kernel_sin+0x22>
 8005cb2:	f7fa feb9 	bl	8000a28 <__aeabi_d2iz>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d050      	beq.n	8005d5c <__kernel_sin+0xc4>
 8005cba:	4652      	mov	r2, sl
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	f7fa fc01 	bl	80004c8 <__aeabi_dmul>
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460f      	mov	r7, r1
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4650      	mov	r0, sl
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	f7fa fbf9 	bl	80004c8 <__aeabi_dmul>
 8005cd6:	a33e      	add	r3, pc, #248	; (adr r3, 8005dd0 <__kernel_sin+0x138>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	4680      	mov	r8, r0
 8005cde:	4689      	mov	r9, r1
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fbf0 	bl	80004c8 <__aeabi_dmul>
 8005ce8:	a33b      	add	r3, pc, #236	; (adr r3, 8005dd8 <__kernel_sin+0x140>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f7fa fa33 	bl	8000158 <__aeabi_dsub>
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	f7fa fbe7 	bl	80004c8 <__aeabi_dmul>
 8005cfa:	a339      	add	r3, pc, #228	; (adr r3, 8005de0 <__kernel_sin+0x148>)
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f7fa fa2c 	bl	800015c <__adddf3>
 8005d04:	4632      	mov	r2, r6
 8005d06:	463b      	mov	r3, r7
 8005d08:	f7fa fbde 	bl	80004c8 <__aeabi_dmul>
 8005d0c:	a336      	add	r3, pc, #216	; (adr r3, 8005de8 <__kernel_sin+0x150>)
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f7fa fa21 	bl	8000158 <__aeabi_dsub>
 8005d16:	4632      	mov	r2, r6
 8005d18:	463b      	mov	r3, r7
 8005d1a:	f7fa fbd5 	bl	80004c8 <__aeabi_dmul>
 8005d1e:	a334      	add	r3, pc, #208	; (adr r3, 8005df0 <__kernel_sin+0x158>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f7fa fa1a 	bl	800015c <__adddf3>
 8005d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d2c:	b9dd      	cbnz	r5, 8005d66 <__kernel_sin+0xce>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4630      	mov	r0, r6
 8005d34:	4639      	mov	r1, r7
 8005d36:	f7fa fbc7 	bl	80004c8 <__aeabi_dmul>
 8005d3a:	a32f      	add	r3, pc, #188	; (adr r3, 8005df8 <__kernel_sin+0x160>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fa0a 	bl	8000158 <__aeabi_dsub>
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	f7fa fbbe 	bl	80004c8 <__aeabi_dmul>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4650      	mov	r0, sl
 8005d52:	4621      	mov	r1, r4
 8005d54:	f7fa fa02 	bl	800015c <__adddf3>
 8005d58:	4682      	mov	sl, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	4650      	mov	r0, sl
 8005d5e:	4621      	mov	r1, r4
 8005d60:	b006      	add	sp, #24
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	2200      	movs	r2, #0
 8005d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6c:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <__kernel_sin+0x168>)
 8005d6e:	f7fa fbab 	bl	80004c8 <__aeabi_dmul>
 8005d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	f7fa fba3 	bl	80004c8 <__aeabi_dmul>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d8a:	f7fa f9e5 	bl	8000158 <__aeabi_dsub>
 8005d8e:	4632      	mov	r2, r6
 8005d90:	463b      	mov	r3, r7
 8005d92:	f7fa fb99 	bl	80004c8 <__aeabi_dmul>
 8005d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d9a:	f7fa f9dd 	bl	8000158 <__aeabi_dsub>
 8005d9e:	a316      	add	r3, pc, #88	; (adr r3, 8005df8 <__kernel_sin+0x160>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	4606      	mov	r6, r0
 8005da6:	460f      	mov	r7, r1
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fb8c 	bl	80004c8 <__aeabi_dmul>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4630      	mov	r0, r6
 8005db6:	4639      	mov	r1, r7
 8005db8:	f7fa f9d0 	bl	800015c <__adddf3>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4650      	mov	r0, sl
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f7fa f9c8 	bl	8000158 <__aeabi_dsub>
 8005dc8:	e7c6      	b.n	8005d58 <__kernel_sin+0xc0>
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	5acfd57c 	.word	0x5acfd57c
 8005dd4:	3de5d93a 	.word	0x3de5d93a
 8005dd8:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ddc:	3e5ae5e6 	.word	0x3e5ae5e6
 8005de0:	57b1fe7d 	.word	0x57b1fe7d
 8005de4:	3ec71de3 	.word	0x3ec71de3
 8005de8:	19c161d5 	.word	0x19c161d5
 8005dec:	3f2a01a0 	.word	0x3f2a01a0
 8005df0:	1110f8a6 	.word	0x1110f8a6
 8005df4:	3f811111 	.word	0x3f811111
 8005df8:	55555549 	.word	0x55555549
 8005dfc:	3fc55555 	.word	0x3fc55555
 8005e00:	3fe00000 	.word	0x3fe00000
 8005e04:	00000000 	.word	0x00000000

08005e08 <atan>:
 8005e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	4bb6      	ldr	r3, [pc, #728]	; (80060e8 <atan+0x2e0>)
 8005e0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e12:	429e      	cmp	r6, r3
 8005e14:	4604      	mov	r4, r0
 8005e16:	460d      	mov	r5, r1
 8005e18:	468b      	mov	fp, r1
 8005e1a:	dd17      	ble.n	8005e4c <atan+0x44>
 8005e1c:	4bb3      	ldr	r3, [pc, #716]	; (80060ec <atan+0x2e4>)
 8005e1e:	429e      	cmp	r6, r3
 8005e20:	dc01      	bgt.n	8005e26 <atan+0x1e>
 8005e22:	d109      	bne.n	8005e38 <atan+0x30>
 8005e24:	b140      	cbz	r0, 8005e38 <atan+0x30>
 8005e26:	4622      	mov	r2, r4
 8005e28:	462b      	mov	r3, r5
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	f7fa f995 	bl	800015c <__adddf3>
 8005e32:	4604      	mov	r4, r0
 8005e34:	460d      	mov	r5, r1
 8005e36:	e005      	b.n	8005e44 <atan+0x3c>
 8005e38:	f1bb 0f00 	cmp.w	fp, #0
 8005e3c:	4cac      	ldr	r4, [pc, #688]	; (80060f0 <atan+0x2e8>)
 8005e3e:	f300 8121 	bgt.w	8006084 <atan+0x27c>
 8005e42:	4dac      	ldr	r5, [pc, #688]	; (80060f4 <atan+0x2ec>)
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4c:	4baa      	ldr	r3, [pc, #680]	; (80060f8 <atan+0x2f0>)
 8005e4e:	429e      	cmp	r6, r3
 8005e50:	dc11      	bgt.n	8005e76 <atan+0x6e>
 8005e52:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005e56:	429e      	cmp	r6, r3
 8005e58:	dc0a      	bgt.n	8005e70 <atan+0x68>
 8005e5a:	a38b      	add	r3, pc, #556	; (adr r3, 8006088 <atan+0x280>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f7fa f97c 	bl	800015c <__adddf3>
 8005e64:	2200      	movs	r2, #0
 8005e66:	4ba5      	ldr	r3, [pc, #660]	; (80060fc <atan+0x2f4>)
 8005e68:	f7fa fdbe 	bl	80009e8 <__aeabi_dcmpgt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1e9      	bne.n	8005e44 <atan+0x3c>
 8005e70:	f04f 3aff 	mov.w	sl, #4294967295
 8005e74:	e027      	b.n	8005ec6 <atan+0xbe>
 8005e76:	f000 f951 	bl	800611c <fabs>
 8005e7a:	4ba1      	ldr	r3, [pc, #644]	; (8006100 <atan+0x2f8>)
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	429e      	cmp	r6, r3
 8005e80:	460d      	mov	r5, r1
 8005e82:	f300 80b8 	bgt.w	8005ff6 <atan+0x1ee>
 8005e86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005e8a:	429e      	cmp	r6, r3
 8005e8c:	f300 809c 	bgt.w	8005fc8 <atan+0x1c0>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	f7fa f962 	bl	800015c <__adddf3>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4b98      	ldr	r3, [pc, #608]	; (80060fc <atan+0x2f4>)
 8005e9c:	f7fa f95c 	bl	8000158 <__aeabi_dsub>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4629      	mov	r1, r5
 8005eae:	f7fa f955 	bl	800015c <__adddf3>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	4639      	mov	r1, r7
 8005eba:	f7fa fc2f 	bl	800071c <__aeabi_ddiv>
 8005ebe:	f04f 0a00 	mov.w	sl, #0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	462b      	mov	r3, r5
 8005eca:	4620      	mov	r0, r4
 8005ecc:	4629      	mov	r1, r5
 8005ece:	f7fa fafb 	bl	80004c8 <__aeabi_dmul>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4680      	mov	r8, r0
 8005ed8:	4689      	mov	r9, r1
 8005eda:	f7fa faf5 	bl	80004c8 <__aeabi_dmul>
 8005ede:	a36c      	add	r3, pc, #432	; (adr r3, 8006090 <atan+0x288>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	f7fa faee 	bl	80004c8 <__aeabi_dmul>
 8005eec:	a36a      	add	r3, pc, #424	; (adr r3, 8006098 <atan+0x290>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa f933 	bl	800015c <__adddf3>
 8005ef6:	4632      	mov	r2, r6
 8005ef8:	463b      	mov	r3, r7
 8005efa:	f7fa fae5 	bl	80004c8 <__aeabi_dmul>
 8005efe:	a368      	add	r3, pc, #416	; (adr r3, 80060a0 <atan+0x298>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa f92a 	bl	800015c <__adddf3>
 8005f08:	4632      	mov	r2, r6
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	f7fa fadc 	bl	80004c8 <__aeabi_dmul>
 8005f10:	a365      	add	r3, pc, #404	; (adr r3, 80060a8 <atan+0x2a0>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa f921 	bl	800015c <__adddf3>
 8005f1a:	4632      	mov	r2, r6
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	f7fa fad3 	bl	80004c8 <__aeabi_dmul>
 8005f22:	a363      	add	r3, pc, #396	; (adr r3, 80060b0 <atan+0x2a8>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f7fa f918 	bl	800015c <__adddf3>
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	463b      	mov	r3, r7
 8005f30:	f7fa faca 	bl	80004c8 <__aeabi_dmul>
 8005f34:	a360      	add	r3, pc, #384	; (adr r3, 80060b8 <atan+0x2b0>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f90f 	bl	800015c <__adddf3>
 8005f3e:	4642      	mov	r2, r8
 8005f40:	464b      	mov	r3, r9
 8005f42:	f7fa fac1 	bl	80004c8 <__aeabi_dmul>
 8005f46:	a35e      	add	r3, pc, #376	; (adr r3, 80060c0 <atan+0x2b8>)
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4689      	mov	r9, r1
 8005f50:	4630      	mov	r0, r6
 8005f52:	4639      	mov	r1, r7
 8005f54:	f7fa fab8 	bl	80004c8 <__aeabi_dmul>
 8005f58:	a35b      	add	r3, pc, #364	; (adr r3, 80060c8 <atan+0x2c0>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa f8fb 	bl	8000158 <__aeabi_dsub>
 8005f62:	4632      	mov	r2, r6
 8005f64:	463b      	mov	r3, r7
 8005f66:	f7fa faaf 	bl	80004c8 <__aeabi_dmul>
 8005f6a:	a359      	add	r3, pc, #356	; (adr r3, 80060d0 <atan+0x2c8>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa f8f2 	bl	8000158 <__aeabi_dsub>
 8005f74:	4632      	mov	r2, r6
 8005f76:	463b      	mov	r3, r7
 8005f78:	f7fa faa6 	bl	80004c8 <__aeabi_dmul>
 8005f7c:	a356      	add	r3, pc, #344	; (adr r3, 80060d8 <atan+0x2d0>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f7fa f8e9 	bl	8000158 <__aeabi_dsub>
 8005f86:	4632      	mov	r2, r6
 8005f88:	463b      	mov	r3, r7
 8005f8a:	f7fa fa9d 	bl	80004c8 <__aeabi_dmul>
 8005f8e:	a354      	add	r3, pc, #336	; (adr r3, 80060e0 <atan+0x2d8>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa f8e0 	bl	8000158 <__aeabi_dsub>
 8005f98:	4632      	mov	r2, r6
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	f7fa fa94 	bl	80004c8 <__aeabi_dmul>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4640      	mov	r0, r8
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	f7fa f8d8 	bl	800015c <__adddf3>
 8005fac:	4622      	mov	r2, r4
 8005fae:	462b      	mov	r3, r5
 8005fb0:	f7fa fa8a 	bl	80004c8 <__aeabi_dmul>
 8005fb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	d144      	bne.n	8006048 <atan+0x240>
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7fa f8c9 	bl	8000158 <__aeabi_dsub>
 8005fc6:	e734      	b.n	8005e32 <atan+0x2a>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <atan+0x2f4>)
 8005fcc:	f7fa f8c4 	bl	8000158 <__aeabi_dsub>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460f      	mov	r7, r1
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4b48      	ldr	r3, [pc, #288]	; (80060fc <atan+0x2f4>)
 8005fdc:	f7fa f8be 	bl	800015c <__adddf3>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa fb98 	bl	800071c <__aeabi_ddiv>
 8005fec:	f04f 0a01 	mov.w	sl, #1
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	e767      	b.n	8005ec6 <atan+0xbe>
 8005ff6:	4b43      	ldr	r3, [pc, #268]	; (8006104 <atan+0x2fc>)
 8005ff8:	429e      	cmp	r6, r3
 8005ffa:	da1a      	bge.n	8006032 <atan+0x22a>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4b42      	ldr	r3, [pc, #264]	; (8006108 <atan+0x300>)
 8006000:	f7fa f8aa 	bl	8000158 <__aeabi_dsub>
 8006004:	2200      	movs	r2, #0
 8006006:	4606      	mov	r6, r0
 8006008:	460f      	mov	r7, r1
 800600a:	4620      	mov	r0, r4
 800600c:	4629      	mov	r1, r5
 800600e:	4b3e      	ldr	r3, [pc, #248]	; (8006108 <atan+0x300>)
 8006010:	f7fa fa5a 	bl	80004c8 <__aeabi_dmul>
 8006014:	2200      	movs	r2, #0
 8006016:	4b39      	ldr	r3, [pc, #228]	; (80060fc <atan+0x2f4>)
 8006018:	f7fa f8a0 	bl	800015c <__adddf3>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	f7fa fb7a 	bl	800071c <__aeabi_ddiv>
 8006028:	f04f 0a02 	mov.w	sl, #2
 800602c:	4604      	mov	r4, r0
 800602e:	460d      	mov	r5, r1
 8006030:	e749      	b.n	8005ec6 <atan+0xbe>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	2000      	movs	r0, #0
 8006038:	4934      	ldr	r1, [pc, #208]	; (800610c <atan+0x304>)
 800603a:	f7fa fb6f 	bl	800071c <__aeabi_ddiv>
 800603e:	f04f 0a03 	mov.w	sl, #3
 8006042:	4604      	mov	r4, r0
 8006044:	460d      	mov	r5, r1
 8006046:	e73e      	b.n	8005ec6 <atan+0xbe>
 8006048:	4b31      	ldr	r3, [pc, #196]	; (8006110 <atan+0x308>)
 800604a:	4e32      	ldr	r6, [pc, #200]	; (8006114 <atan+0x30c>)
 800604c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006050:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006054:	e9da 2300 	ldrd	r2, r3, [sl]
 8006058:	f7fa f87e 	bl	8000158 <__aeabi_dsub>
 800605c:	4622      	mov	r2, r4
 800605e:	462b      	mov	r3, r5
 8006060:	f7fa f87a 	bl	8000158 <__aeabi_dsub>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	e9d6 0100 	ldrd	r0, r1, [r6]
 800606c:	f7fa f874 	bl	8000158 <__aeabi_dsub>
 8006070:	f1bb 0f00 	cmp.w	fp, #0
 8006074:	4604      	mov	r4, r0
 8006076:	460d      	mov	r5, r1
 8006078:	f6bf aee4 	bge.w	8005e44 <atan+0x3c>
 800607c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006080:	461d      	mov	r5, r3
 8006082:	e6df      	b.n	8005e44 <atan+0x3c>
 8006084:	4d24      	ldr	r5, [pc, #144]	; (8006118 <atan+0x310>)
 8006086:	e6dd      	b.n	8005e44 <atan+0x3c>
 8006088:	8800759c 	.word	0x8800759c
 800608c:	7e37e43c 	.word	0x7e37e43c
 8006090:	e322da11 	.word	0xe322da11
 8006094:	3f90ad3a 	.word	0x3f90ad3a
 8006098:	24760deb 	.word	0x24760deb
 800609c:	3fa97b4b 	.word	0x3fa97b4b
 80060a0:	a0d03d51 	.word	0xa0d03d51
 80060a4:	3fb10d66 	.word	0x3fb10d66
 80060a8:	c54c206e 	.word	0xc54c206e
 80060ac:	3fb745cd 	.word	0x3fb745cd
 80060b0:	920083ff 	.word	0x920083ff
 80060b4:	3fc24924 	.word	0x3fc24924
 80060b8:	5555550d 	.word	0x5555550d
 80060bc:	3fd55555 	.word	0x3fd55555
 80060c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80060c4:	bfa2b444 	.word	0xbfa2b444
 80060c8:	52defd9a 	.word	0x52defd9a
 80060cc:	3fadde2d 	.word	0x3fadde2d
 80060d0:	af749a6d 	.word	0xaf749a6d
 80060d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80060d8:	fe231671 	.word	0xfe231671
 80060dc:	3fbc71c6 	.word	0x3fbc71c6
 80060e0:	9998ebc4 	.word	0x9998ebc4
 80060e4:	3fc99999 	.word	0x3fc99999
 80060e8:	440fffff 	.word	0x440fffff
 80060ec:	7ff00000 	.word	0x7ff00000
 80060f0:	54442d18 	.word	0x54442d18
 80060f4:	bff921fb 	.word	0xbff921fb
 80060f8:	3fdbffff 	.word	0x3fdbffff
 80060fc:	3ff00000 	.word	0x3ff00000
 8006100:	3ff2ffff 	.word	0x3ff2ffff
 8006104:	40038000 	.word	0x40038000
 8006108:	3ff80000 	.word	0x3ff80000
 800610c:	bff00000 	.word	0xbff00000
 8006110:	08006990 	.word	0x08006990
 8006114:	08006970 	.word	0x08006970
 8006118:	3ff921fb 	.word	0x3ff921fb

0800611c <fabs>:
 800611c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006120:	4770      	bx	lr
 8006122:	0000      	movs	r0, r0
 8006124:	0000      	movs	r0, r0
	...

08006128 <floor>:
 8006128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006130:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006134:	2e13      	cmp	r6, #19
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4607      	mov	r7, r0
 800613c:	460c      	mov	r4, r1
 800613e:	4605      	mov	r5, r0
 8006140:	dc33      	bgt.n	80061aa <floor+0x82>
 8006142:	2e00      	cmp	r6, #0
 8006144:	da14      	bge.n	8006170 <floor+0x48>
 8006146:	a334      	add	r3, pc, #208	; (adr r3, 8006218 <floor+0xf0>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa f806 	bl	800015c <__adddf3>
 8006150:	2200      	movs	r2, #0
 8006152:	2300      	movs	r3, #0
 8006154:	f7fa fc48 	bl	80009e8 <__aeabi_dcmpgt>
 8006158:	b138      	cbz	r0, 800616a <floor+0x42>
 800615a:	2c00      	cmp	r4, #0
 800615c:	da58      	bge.n	8006210 <floor+0xe8>
 800615e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006162:	431d      	orrs	r5, r3
 8006164:	d001      	beq.n	800616a <floor+0x42>
 8006166:	2500      	movs	r5, #0
 8006168:	4c2d      	ldr	r4, [pc, #180]	; (8006220 <floor+0xf8>)
 800616a:	4623      	mov	r3, r4
 800616c:	462f      	mov	r7, r5
 800616e:	e025      	b.n	80061bc <floor+0x94>
 8006170:	4a2c      	ldr	r2, [pc, #176]	; (8006224 <floor+0xfc>)
 8006172:	fa42 f806 	asr.w	r8, r2, r6
 8006176:	ea01 0208 	and.w	r2, r1, r8
 800617a:	4302      	orrs	r2, r0
 800617c:	d01e      	beq.n	80061bc <floor+0x94>
 800617e:	a326      	add	r3, pc, #152	; (adr r3, 8006218 <floor+0xf0>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7f9 ffea 	bl	800015c <__adddf3>
 8006188:	2200      	movs	r2, #0
 800618a:	2300      	movs	r3, #0
 800618c:	f7fa fc2c 	bl	80009e8 <__aeabi_dcmpgt>
 8006190:	2800      	cmp	r0, #0
 8006192:	d0ea      	beq.n	800616a <floor+0x42>
 8006194:	2c00      	cmp	r4, #0
 8006196:	bfbe      	ittt	lt
 8006198:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800619c:	fa43 f606 	asrlt.w	r6, r3, r6
 80061a0:	19a4      	addlt	r4, r4, r6
 80061a2:	2500      	movs	r5, #0
 80061a4:	ea24 0408 	bic.w	r4, r4, r8
 80061a8:	e7df      	b.n	800616a <floor+0x42>
 80061aa:	2e33      	cmp	r6, #51	; 0x33
 80061ac:	dd0a      	ble.n	80061c4 <floor+0x9c>
 80061ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80061b2:	d103      	bne.n	80061bc <floor+0x94>
 80061b4:	f7f9 ffd2 	bl	800015c <__adddf3>
 80061b8:	4607      	mov	r7, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4638      	mov	r0, r7
 80061be:	4619      	mov	r1, r3
 80061c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295
 80061c8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80061cc:	fa22 f808 	lsr.w	r8, r2, r8
 80061d0:	ea18 0f00 	tst.w	r8, r0
 80061d4:	d0f2      	beq.n	80061bc <floor+0x94>
 80061d6:	a310      	add	r3, pc, #64	; (adr r3, 8006218 <floor+0xf0>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7f9 ffbe 	bl	800015c <__adddf3>
 80061e0:	2200      	movs	r2, #0
 80061e2:	2300      	movs	r3, #0
 80061e4:	f7fa fc00 	bl	80009e8 <__aeabi_dcmpgt>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0be      	beq.n	800616a <floor+0x42>
 80061ec:	2c00      	cmp	r4, #0
 80061ee:	da02      	bge.n	80061f6 <floor+0xce>
 80061f0:	2e14      	cmp	r6, #20
 80061f2:	d103      	bne.n	80061fc <floor+0xd4>
 80061f4:	3401      	adds	r4, #1
 80061f6:	ea25 0508 	bic.w	r5, r5, r8
 80061fa:	e7b6      	b.n	800616a <floor+0x42>
 80061fc:	2301      	movs	r3, #1
 80061fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006202:	fa03 f606 	lsl.w	r6, r3, r6
 8006206:	4435      	add	r5, r6
 8006208:	42bd      	cmp	r5, r7
 800620a:	bf38      	it	cc
 800620c:	18e4      	addcc	r4, r4, r3
 800620e:	e7f2      	b.n	80061f6 <floor+0xce>
 8006210:	2500      	movs	r5, #0
 8006212:	462c      	mov	r4, r5
 8006214:	e7a9      	b.n	800616a <floor+0x42>
 8006216:	bf00      	nop
 8006218:	8800759c 	.word	0x8800759c
 800621c:	7e37e43c 	.word	0x7e37e43c
 8006220:	bff00000 	.word	0xbff00000
 8006224:	000fffff 	.word	0x000fffff

08006228 <nan>:
 8006228:	2000      	movs	r0, #0
 800622a:	4901      	ldr	r1, [pc, #4]	; (8006230 <nan+0x8>)
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	7ff80000 	.word	0x7ff80000
 8006234:	00000000 	.word	0x00000000

08006238 <scalbn>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	4617      	mov	r7, r2
 8006244:	460b      	mov	r3, r1
 8006246:	b996      	cbnz	r6, 800626e <scalbn+0x36>
 8006248:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800624c:	4303      	orrs	r3, r0
 800624e:	d039      	beq.n	80062c4 <scalbn+0x8c>
 8006250:	4b33      	ldr	r3, [pc, #204]	; (8006320 <scalbn+0xe8>)
 8006252:	2200      	movs	r2, #0
 8006254:	f7fa f938 	bl	80004c8 <__aeabi_dmul>
 8006258:	4b32      	ldr	r3, [pc, #200]	; (8006324 <scalbn+0xec>)
 800625a:	4604      	mov	r4, r0
 800625c:	429f      	cmp	r7, r3
 800625e:	460d      	mov	r5, r1
 8006260:	da0f      	bge.n	8006282 <scalbn+0x4a>
 8006262:	a32b      	add	r3, pc, #172	; (adr r3, 8006310 <scalbn+0xd8>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7fa f92e 	bl	80004c8 <__aeabi_dmul>
 800626c:	e006      	b.n	800627c <scalbn+0x44>
 800626e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006272:	4296      	cmp	r6, r2
 8006274:	d10a      	bne.n	800628c <scalbn+0x54>
 8006276:	4602      	mov	r2, r0
 8006278:	f7f9 ff70 	bl	800015c <__adddf3>
 800627c:	4604      	mov	r4, r0
 800627e:	460d      	mov	r5, r1
 8006280:	e020      	b.n	80062c4 <scalbn+0x8c>
 8006282:	460b      	mov	r3, r1
 8006284:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006288:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800628c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006290:	19b9      	adds	r1, r7, r6
 8006292:	4291      	cmp	r1, r2
 8006294:	dd0e      	ble.n	80062b4 <scalbn+0x7c>
 8006296:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800629a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800629e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80062a2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80062a6:	4820      	ldr	r0, [pc, #128]	; (8006328 <scalbn+0xf0>)
 80062a8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80062ac:	a31a      	add	r3, pc, #104	; (adr r3, 8006318 <scalbn+0xe0>)
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	e7d9      	b.n	8006268 <scalbn+0x30>
 80062b4:	2900      	cmp	r1, #0
 80062b6:	dd08      	ble.n	80062ca <scalbn+0x92>
 80062b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80062c4:	4620      	mov	r0, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80062ce:	da12      	bge.n	80062f6 <scalbn+0xbe>
 80062d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80062d4:	429f      	cmp	r7, r3
 80062d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80062da:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80062de:	dcdc      	bgt.n	800629a <scalbn+0x62>
 80062e0:	a30b      	add	r3, pc, #44	; (adr r3, 8006310 <scalbn+0xd8>)
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80062ea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80062ee:	480f      	ldr	r0, [pc, #60]	; (800632c <scalbn+0xf4>)
 80062f0:	f041 011f 	orr.w	r1, r1, #31
 80062f4:	e7b8      	b.n	8006268 <scalbn+0x30>
 80062f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062fa:	3136      	adds	r1, #54	; 0x36
 80062fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006300:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006304:	4620      	mov	r0, r4
 8006306:	4629      	mov	r1, r5
 8006308:	2200      	movs	r2, #0
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <scalbn+0xf8>)
 800630c:	e7ac      	b.n	8006268 <scalbn+0x30>
 800630e:	bf00      	nop
 8006310:	c2f8f359 	.word	0xc2f8f359
 8006314:	01a56e1f 	.word	0x01a56e1f
 8006318:	8800759c 	.word	0x8800759c
 800631c:	7e37e43c 	.word	0x7e37e43c
 8006320:	43500000 	.word	0x43500000
 8006324:	ffff3cb0 	.word	0xffff3cb0
 8006328:	8800759c 	.word	0x8800759c
 800632c:	c2f8f359 	.word	0xc2f8f359
 8006330:	3c900000 	.word	0x3c900000
 8006334:	00000000 	.word	0x00000000

08006338 <__ieee754_log>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	460d      	mov	r5, r1
 8006346:	b087      	sub	sp, #28
 8006348:	da24      	bge.n	8006394 <__ieee754_log+0x5c>
 800634a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800634e:	4304      	orrs	r4, r0
 8006350:	d108      	bne.n	8006364 <__ieee754_log+0x2c>
 8006352:	2200      	movs	r2, #0
 8006354:	2300      	movs	r3, #0
 8006356:	2000      	movs	r0, #0
 8006358:	49cb      	ldr	r1, [pc, #812]	; (8006688 <__ieee754_log+0x350>)
 800635a:	f7fa f9df 	bl	800071c <__aeabi_ddiv>
 800635e:	b007      	add	sp, #28
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	2900      	cmp	r1, #0
 8006366:	da04      	bge.n	8006372 <__ieee754_log+0x3a>
 8006368:	f7f9 fef6 	bl	8000158 <__aeabi_dsub>
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	e7f3      	b.n	800635a <__ieee754_log+0x22>
 8006372:	2200      	movs	r2, #0
 8006374:	4bc5      	ldr	r3, [pc, #788]	; (800668c <__ieee754_log+0x354>)
 8006376:	f7fa f8a7 	bl	80004c8 <__aeabi_dmul>
 800637a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	460d      	mov	r5, r1
 8006384:	49c2      	ldr	r1, [pc, #776]	; (8006690 <__ieee754_log+0x358>)
 8006386:	428d      	cmp	r5, r1
 8006388:	dd06      	ble.n	8006398 <__ieee754_log+0x60>
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	f7f9 fee5 	bl	800015c <__adddf3>
 8006392:	e7e4      	b.n	800635e <__ieee754_log+0x26>
 8006394:	2600      	movs	r6, #0
 8006396:	e7f5      	b.n	8006384 <__ieee754_log+0x4c>
 8006398:	152c      	asrs	r4, r5, #20
 800639a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800639e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80063a2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063a6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80063aa:	4426      	add	r6, r4
 80063ac:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 80063b0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 80063b4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80063b8:	ea41 0305 	orr.w	r3, r1, r5
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	2200      	movs	r2, #0
 80063c2:	4bb4      	ldr	r3, [pc, #720]	; (8006694 <__ieee754_log+0x35c>)
 80063c4:	f7f9 fec8 	bl	8000158 <__aeabi_dsub>
 80063c8:	1cab      	adds	r3, r5, #2
 80063ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	4682      	mov	sl, r0
 80063d2:	468b      	mov	fp, r1
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80063dc:	dc53      	bgt.n	8006486 <__ieee754_log+0x14e>
 80063de:	2300      	movs	r3, #0
 80063e0:	f7fa fada 	bl	8000998 <__aeabi_dcmpeq>
 80063e4:	b1d0      	cbz	r0, 800641c <__ieee754_log+0xe4>
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	f000 8122 	beq.w	8006630 <__ieee754_log+0x2f8>
 80063ec:	4620      	mov	r0, r4
 80063ee:	f7fa f801 	bl	80003f4 <__aeabi_i2d>
 80063f2:	a391      	add	r3, pc, #580	; (adr r3, 8006638 <__ieee754_log+0x300>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	4606      	mov	r6, r0
 80063fa:	460f      	mov	r7, r1
 80063fc:	f7fa f864 	bl	80004c8 <__aeabi_dmul>
 8006400:	a38f      	add	r3, pc, #572	; (adr r3, 8006640 <__ieee754_log+0x308>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	4630      	mov	r0, r6
 800640c:	4639      	mov	r1, r7
 800640e:	f7fa f85b 	bl	80004c8 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	e7b8      	b.n	800638e <__ieee754_log+0x56>
 800641c:	a38a      	add	r3, pc, #552	; (adr r3, 8006648 <__ieee754_log+0x310>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	4650      	mov	r0, sl
 8006424:	4659      	mov	r1, fp
 8006426:	f7fa f84f 	bl	80004c8 <__aeabi_dmul>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	2000      	movs	r0, #0
 8006430:	4999      	ldr	r1, [pc, #612]	; (8006698 <__ieee754_log+0x360>)
 8006432:	f7f9 fe91 	bl	8000158 <__aeabi_dsub>
 8006436:	4652      	mov	r2, sl
 8006438:	4606      	mov	r6, r0
 800643a:	460f      	mov	r7, r1
 800643c:	465b      	mov	r3, fp
 800643e:	4650      	mov	r0, sl
 8006440:	4659      	mov	r1, fp
 8006442:	f7fa f841 	bl	80004c8 <__aeabi_dmul>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7fa f83b 	bl	80004c8 <__aeabi_dmul>
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	b914      	cbnz	r4, 800645e <__ieee754_log+0x126>
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	e0a2      	b.n	80065a4 <__ieee754_log+0x26c>
 800645e:	4620      	mov	r0, r4
 8006460:	f7f9 ffc8 	bl	80003f4 <__aeabi_i2d>
 8006464:	a374      	add	r3, pc, #464	; (adr r3, 8006638 <__ieee754_log+0x300>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	4680      	mov	r8, r0
 800646c:	4689      	mov	r9, r1
 800646e:	f7fa f82b 	bl	80004c8 <__aeabi_dmul>
 8006472:	a373      	add	r3, pc, #460	; (adr r3, 8006640 <__ieee754_log+0x308>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	4604      	mov	r4, r0
 800647a:	460d      	mov	r5, r1
 800647c:	4640      	mov	r0, r8
 800647e:	4649      	mov	r1, r9
 8006480:	f7fa f822 	bl	80004c8 <__aeabi_dmul>
 8006484:	e0a7      	b.n	80065d6 <__ieee754_log+0x29e>
 8006486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800648a:	f7f9 fe67 	bl	800015c <__adddf3>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4650      	mov	r0, sl
 8006494:	4659      	mov	r1, fp
 8006496:	f7fa f941 	bl	800071c <__aeabi_ddiv>
 800649a:	e9cd 0100 	strd	r0, r1, [sp]
 800649e:	4620      	mov	r0, r4
 80064a0:	f7f9 ffa8 	bl	80003f4 <__aeabi_i2d>
 80064a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	f7fa f80a 	bl	80004c8 <__aeabi_dmul>
 80064b4:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80064b8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80064bc:	4602      	mov	r2, r0
 80064be:	9305      	str	r3, [sp, #20]
 80064c0:	460b      	mov	r3, r1
 80064c2:	4606      	mov	r6, r0
 80064c4:	460f      	mov	r7, r1
 80064c6:	f7f9 ffff 	bl	80004c8 <__aeabi_dmul>
 80064ca:	a361      	add	r3, pc, #388	; (adr r3, 8006650 <__ieee754_log+0x318>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	4680      	mov	r8, r0
 80064d2:	4689      	mov	r9, r1
 80064d4:	f7f9 fff8 	bl	80004c8 <__aeabi_dmul>
 80064d8:	a35f      	add	r3, pc, #380	; (adr r3, 8006658 <__ieee754_log+0x320>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f7f9 fe3d 	bl	800015c <__adddf3>
 80064e2:	4642      	mov	r2, r8
 80064e4:	464b      	mov	r3, r9
 80064e6:	f7f9 ffef 	bl	80004c8 <__aeabi_dmul>
 80064ea:	a35d      	add	r3, pc, #372	; (adr r3, 8006660 <__ieee754_log+0x328>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f7f9 fe34 	bl	800015c <__adddf3>
 80064f4:	4642      	mov	r2, r8
 80064f6:	464b      	mov	r3, r9
 80064f8:	f7f9 ffe6 	bl	80004c8 <__aeabi_dmul>
 80064fc:	a35a      	add	r3, pc, #360	; (adr r3, 8006668 <__ieee754_log+0x330>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f7f9 fe2b 	bl	800015c <__adddf3>
 8006506:	4632      	mov	r2, r6
 8006508:	463b      	mov	r3, r7
 800650a:	f7f9 ffdd 	bl	80004c8 <__aeabi_dmul>
 800650e:	a358      	add	r3, pc, #352	; (adr r3, 8006670 <__ieee754_log+0x338>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	4606      	mov	r6, r0
 8006516:	460f      	mov	r7, r1
 8006518:	4640      	mov	r0, r8
 800651a:	4649      	mov	r1, r9
 800651c:	f7f9 ffd4 	bl	80004c8 <__aeabi_dmul>
 8006520:	a355      	add	r3, pc, #340	; (adr r3, 8006678 <__ieee754_log+0x340>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7f9 fe19 	bl	800015c <__adddf3>
 800652a:	4642      	mov	r2, r8
 800652c:	464b      	mov	r3, r9
 800652e:	f7f9 ffcb 	bl	80004c8 <__aeabi_dmul>
 8006532:	a353      	add	r3, pc, #332	; (adr r3, 8006680 <__ieee754_log+0x348>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7f9 fe10 	bl	800015c <__adddf3>
 800653c:	4642      	mov	r2, r8
 800653e:	464b      	mov	r3, r9
 8006540:	f7f9 ffc2 	bl	80004c8 <__aeabi_dmul>
 8006544:	460b      	mov	r3, r1
 8006546:	4602      	mov	r2, r0
 8006548:	4639      	mov	r1, r7
 800654a:	4630      	mov	r0, r6
 800654c:	f7f9 fe06 	bl	800015c <__adddf3>
 8006550:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006554:	9b05      	ldr	r3, [sp, #20]
 8006556:	3551      	adds	r5, #81	; 0x51
 8006558:	431d      	orrs	r5, r3
 800655a:	2d00      	cmp	r5, #0
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	dd48      	ble.n	80065f4 <__ieee754_log+0x2bc>
 8006562:	2200      	movs	r2, #0
 8006564:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <__ieee754_log+0x360>)
 8006566:	4650      	mov	r0, sl
 8006568:	4659      	mov	r1, fp
 800656a:	f7f9 ffad 	bl	80004c8 <__aeabi_dmul>
 800656e:	4652      	mov	r2, sl
 8006570:	465b      	mov	r3, fp
 8006572:	f7f9 ffa9 	bl	80004c8 <__aeabi_dmul>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7f9 fdeb 	bl	800015c <__adddf3>
 8006586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800658a:	f7f9 ff9d 	bl	80004c8 <__aeabi_dmul>
 800658e:	4680      	mov	r8, r0
 8006590:	4689      	mov	r9, r1
 8006592:	b964      	cbnz	r4, 80065ae <__ieee754_log+0x276>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7f9 fddc 	bl	8000158 <__aeabi_dsub>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4650      	mov	r0, sl
 80065a6:	4659      	mov	r1, fp
 80065a8:	f7f9 fdd6 	bl	8000158 <__aeabi_dsub>
 80065ac:	e6d7      	b.n	800635e <__ieee754_log+0x26>
 80065ae:	a322      	add	r3, pc, #136	; (adr r3, 8006638 <__ieee754_log+0x300>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b8:	f7f9 ff86 	bl	80004c8 <__aeabi_dmul>
 80065bc:	a320      	add	r3, pc, #128	; (adr r3, 8006640 <__ieee754_log+0x308>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	4604      	mov	r4, r0
 80065c4:	460d      	mov	r5, r1
 80065c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ca:	f7f9 ff7d 	bl	80004c8 <__aeabi_dmul>
 80065ce:	4642      	mov	r2, r8
 80065d0:	464b      	mov	r3, r9
 80065d2:	f7f9 fdc3 	bl	800015c <__adddf3>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4630      	mov	r0, r6
 80065dc:	4639      	mov	r1, r7
 80065de:	f7f9 fdbb 	bl	8000158 <__aeabi_dsub>
 80065e2:	4652      	mov	r2, sl
 80065e4:	465b      	mov	r3, fp
 80065e6:	f7f9 fdb7 	bl	8000158 <__aeabi_dsub>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4620      	mov	r0, r4
 80065f0:	4629      	mov	r1, r5
 80065f2:	e7d9      	b.n	80065a8 <__ieee754_log+0x270>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4650      	mov	r0, sl
 80065fa:	4659      	mov	r1, fp
 80065fc:	f7f9 fdac 	bl	8000158 <__aeabi_dsub>
 8006600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006604:	f7f9 ff60 	bl	80004c8 <__aeabi_dmul>
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	2c00      	cmp	r4, #0
 800660e:	f43f af23 	beq.w	8006458 <__ieee754_log+0x120>
 8006612:	a309      	add	r3, pc, #36	; (adr r3, 8006638 <__ieee754_log+0x300>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800661c:	f7f9 ff54 	bl	80004c8 <__aeabi_dmul>
 8006620:	a307      	add	r3, pc, #28	; (adr r3, 8006640 <__ieee754_log+0x308>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	4604      	mov	r4, r0
 8006628:	460d      	mov	r5, r1
 800662a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662e:	e727      	b.n	8006480 <__ieee754_log+0x148>
 8006630:	2000      	movs	r0, #0
 8006632:	2100      	movs	r1, #0
 8006634:	e693      	b.n	800635e <__ieee754_log+0x26>
 8006636:	bf00      	nop
 8006638:	fee00000 	.word	0xfee00000
 800663c:	3fe62e42 	.word	0x3fe62e42
 8006640:	35793c76 	.word	0x35793c76
 8006644:	3dea39ef 	.word	0x3dea39ef
 8006648:	55555555 	.word	0x55555555
 800664c:	3fd55555 	.word	0x3fd55555
 8006650:	df3e5244 	.word	0xdf3e5244
 8006654:	3fc2f112 	.word	0x3fc2f112
 8006658:	96cb03de 	.word	0x96cb03de
 800665c:	3fc74664 	.word	0x3fc74664
 8006660:	94229359 	.word	0x94229359
 8006664:	3fd24924 	.word	0x3fd24924
 8006668:	55555593 	.word	0x55555593
 800666c:	3fe55555 	.word	0x3fe55555
 8006670:	d078c69f 	.word	0xd078c69f
 8006674:	3fc39a09 	.word	0x3fc39a09
 8006678:	1d8e78af 	.word	0x1d8e78af
 800667c:	3fcc71c5 	.word	0x3fcc71c5
 8006680:	9997fa04 	.word	0x9997fa04
 8006684:	3fd99999 	.word	0x3fd99999
 8006688:	c3500000 	.word	0xc3500000
 800668c:	43500000 	.word	0x43500000
 8006690:	7fefffff 	.word	0x7fefffff
 8006694:	3ff00000 	.word	0x3ff00000
 8006698:	3fe00000 	.word	0x3fe00000

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
